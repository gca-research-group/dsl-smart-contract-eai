/*
 * generated by Xtext 2.26.0
 */
package br.edu.unijui.gca.smartce.ide.contentassist.antlr;

import br.edu.unijui.gca.smartce.ide.contentassist.antlr.internal.InternalSmartCEParser;
import br.edu.unijui.gca.smartce.services.SmartCEGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SmartCEParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SmartCEGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SmartCEGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getClauseAccess().getAlternatives_0(), "rule__Clause__Alternatives_0");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getBusinessRuleAccess().getAlternatives(), "rule__BusinessRule__Alternatives");
			builder.put(grammarAccess.getLogicalOperatorAccess().getNameAlternatives_0(), "rule__LogicalOperator__NameAlternatives_0");
			builder.put(grammarAccess.getPartyAccess().getAlternatives(), "rule__Party__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives_1_1(), "rule__Expression__Alternatives_1_1");
			builder.put(grammarAccess.getNegationAccess().getAlternatives(), "rule__Negation__Alternatives");
			builder.put(grammarAccess.getComparisonAccess().getAlternatives_1_1(), "rule__Comparison__Alternatives_1_1");
			builder.put(grammarAccess.getPlusAccess().getAlternatives_1_1(), "rule__Plus__Alternatives_1_1");
			builder.put(grammarAccess.getFactorAccess().getAlternatives_1_1(), "rule__Factor__Alternatives_1_1");
			builder.put(grammarAccess.getNegativeAccess().getAlternatives(), "rule__Negative__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getLiteralValueAccess().getAlternatives(), "rule__LiteralValue__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getWeekDayAccess().getAlternatives(), "rule__WeekDay__Alternatives");
			builder.put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getContractAccess().getGroup(), "rule__Contract__Group__0");
			builder.put(grammarAccess.getClauseAccess().getGroup(), "rule__Clause__Group__0");
			builder.put(grammarAccess.getClauseAccess().getGroup_18(), "rule__Clause__Group_18__0");
			builder.put(grammarAccess.getCompositeConditionAccess().getGroup(), "rule__CompositeCondition__Group__0");
			builder.put(grammarAccess.getCompositeConditionAccess().getGroup_3(), "rule__CompositeCondition__Group_3__0");
			builder.put(grammarAccess.getTimeoutAccess().getGroup(), "rule__Timeout__Group__0");
			builder.put(grammarAccess.getOperationsLimitAccess().getGroup(), "rule__OperationsLimit__Group__0");
			builder.put(grammarAccess.getBusinessDayAccess().getGroup(), "rule__BusinessDay__Group__0");
			builder.put(grammarAccess.getBusinessTimeAccess().getGroup(), "rule__BusinessTime__Group__0");
			builder.put(grammarAccess.getMessageContentAccess().getGroup(), "rule__MessageContent__Group__0");
			builder.put(grammarAccess.getApplicationAccess().getGroup(), "rule__Application__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getOnSuccessAccess().getGroup(), "rule__OnSuccess__Group__0");
			builder.put(grammarAccess.getOnBreachAccess().getGroup(), "rule__OnBreach__Group__0");
			builder.put(grammarAccess.getBusinessActionAccess().getGroup(), "rule__BusinessAction__Group__0");
			builder.put(grammarAccess.getBusinessActionAccess().getGroup_4(), "rule__BusinessAction__Group_4__0");
			builder.put(grammarAccess.getEventLogAccess().getGroup(), "rule__EventLog__Group__0");
			builder.put(grammarAccess.getEventLogAccess().getGroup_4(), "rule__EventLog__Group_4__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getNegationAccess().getGroup_1(), "rule__Negation__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getPlusAccess().getGroup(), "rule__Plus__Group__0");
			builder.put(grammarAccess.getPlusAccess().getGroup_1(), "rule__Plus__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getNegativeAccess().getGroup_1(), "rule__Negative__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getDATEAccess().getGroup(), "rule__DATE__Group__0");
			builder.put(grammarAccess.getModelAccess().getImportsAssignment_1(), "rule__Model__ImportsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getContractsAssignment_2(), "rule__Model__ContractsAssignment_2");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getContractAccess().getNameAssignment_1(), "rule__Contract__NameAssignment_1");
			builder.put(grammarAccess.getContractAccess().getBeginDateAssignment_5(), "rule__Contract__BeginDateAssignment_5");
			builder.put(grammarAccess.getContractAccess().getDueDateAssignment_8(), "rule__Contract__DueDateAssignment_8");
			builder.put(grammarAccess.getContractAccess().getApplicationAssignment_11(), "rule__Contract__ApplicationAssignment_11");
			builder.put(grammarAccess.getContractAccess().getProcessAssignment_14(), "rule__Contract__ProcessAssignment_14");
			builder.put(grammarAccess.getContractAccess().getClausesAssignment_15(), "rule__Contract__ClausesAssignment_15");
			builder.put(grammarAccess.getContractAccess().getActionsAssignment_16(), "rule__Contract__ActionsAssignment_16");
			builder.put(grammarAccess.getClauseAccess().getNameAssignment_1(), "rule__Clause__NameAssignment_1");
			builder.put(grammarAccess.getClauseAccess().getDescriptionAssignment_5(), "rule__Clause__DescriptionAssignment_5");
			builder.put(grammarAccess.getClauseAccess().getRolePlayerAssignment_8(), "rule__Clause__RolePlayerAssignment_8");
			builder.put(grammarAccess.getClauseAccess().getOperationAssignment_11(), "rule__Clause__OperationAssignment_11");
			builder.put(grammarAccess.getClauseAccess().getConditionAssignment_14(), "rule__Clause__ConditionAssignment_14");
			builder.put(grammarAccess.getClauseAccess().getOnBreachAssignment_17(), "rule__Clause__OnBreachAssignment_17");
			builder.put(grammarAccess.getClauseAccess().getOnSuccessAssignment_18_1(), "rule__Clause__OnSuccessAssignment_18_1");
			builder.put(grammarAccess.getCompositeConditionAccess().getConditionsAssignment_0(), "rule__CompositeCondition__ConditionsAssignment_0");
			builder.put(grammarAccess.getCompositeConditionAccess().getLogicalOperatorsAssignment_1(), "rule__CompositeCondition__LogicalOperatorsAssignment_1");
			builder.put(grammarAccess.getCompositeConditionAccess().getConditionsAssignment_2(), "rule__CompositeCondition__ConditionsAssignment_2");
			builder.put(grammarAccess.getCompositeConditionAccess().getLogicalOperatorsAssignment_3_0(), "rule__CompositeCondition__LogicalOperatorsAssignment_3_0");
			builder.put(grammarAccess.getCompositeConditionAccess().getConditionsAssignment_3_1(), "rule__CompositeCondition__ConditionsAssignment_3_1");
			builder.put(grammarAccess.getLogicalOperatorAccess().getNameAssignment(), "rule__LogicalOperator__NameAssignment");
			builder.put(grammarAccess.getTimeoutAccess().getValueAssignment_2(), "rule__Timeout__ValueAssignment_2");
			builder.put(grammarAccess.getOperationsLimitAccess().getOperationsNumberAssignment_2(), "rule__OperationsLimit__OperationsNumberAssignment_2");
			builder.put(grammarAccess.getOperationsLimitAccess().getTimeUnitAssignment_4(), "rule__OperationsLimit__TimeUnitAssignment_4");
			builder.put(grammarAccess.getBusinessDayAccess().getStartAssignment_2(), "rule__BusinessDay__StartAssignment_2");
			builder.put(grammarAccess.getBusinessDayAccess().getEndAssignment_4(), "rule__BusinessDay__EndAssignment_4");
			builder.put(grammarAccess.getBusinessTimeAccess().getStartAssignment_2(), "rule__BusinessTime__StartAssignment_2");
			builder.put(grammarAccess.getBusinessTimeAccess().getEndAssignment_4(), "rule__BusinessTime__EndAssignment_4");
			builder.put(grammarAccess.getMessageContentAccess().getContentAssignment_2(), "rule__MessageContent__ContentAssignment_2");
			builder.put(grammarAccess.getApplicationAccess().getNameAssignment_0(), "rule__Application__NameAssignment_0");
			builder.put(grammarAccess.getApplicationAccess().getDescriptionAssignment_2(), "rule__Application__DescriptionAssignment_2");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_0(), "rule__Process__NameAssignment_0");
			builder.put(grammarAccess.getProcessAccess().getDescriptionAssignment_2(), "rule__Process__DescriptionAssignment_2");
			builder.put(grammarAccess.getOnSuccessAccess().getActionAssignment_1(), "rule__OnSuccess__ActionAssignment_1");
			builder.put(grammarAccess.getOnSuccessAccess().getMessageAssignment_3(), "rule__OnSuccess__MessageAssignment_3");
			builder.put(grammarAccess.getOnBreachAccess().getActionAssignment_1(), "rule__OnBreach__ActionAssignment_1");
			builder.put(grammarAccess.getOnBreachAccess().getMessageAssignment_3(), "rule__OnBreach__MessageAssignment_3");
			builder.put(grammarAccess.getBusinessActionAccess().getNameAssignment_1(), "rule__BusinessAction__NameAssignment_1");
			builder.put(grammarAccess.getBusinessActionAccess().getParametersAssignment_3(), "rule__BusinessAction__ParametersAssignment_3");
			builder.put(grammarAccess.getBusinessActionAccess().getParametersAssignment_4_1(), "rule__BusinessAction__ParametersAssignment_4_1");
			builder.put(grammarAccess.getEventLogAccess().getNameAssignment_1(), "rule__EventLog__NameAssignment_1");
			builder.put(grammarAccess.getEventLogAccess().getParametersAssignment_3(), "rule__EventLog__ParametersAssignment_3");
			builder.put(grammarAccess.getEventLogAccess().getParametersAssignment_4_1(), "rule__EventLog__ParametersAssignment_4_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_0(), "rule__Variable__NameAssignment_0");
			builder.put(grammarAccess.getVariableAccess().getTypeAssignment_2(), "rule__Variable__TypeAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getSymbolAssignment_1_1_0(), "rule__Expression__SymbolAssignment_1_1_0");
			builder.put(grammarAccess.getExpressionAccess().getSymbolAssignment_1_1_1(), "rule__Expression__SymbolAssignment_1_1_1");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
			builder.put(grammarAccess.getNegationAccess().getSymbolAssignment_1_1(), "rule__Negation__SymbolAssignment_1_1");
			builder.put(grammarAccess.getNegationAccess().getExpressionAssignment_1_2(), "rule__Negation__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_0(), "rule__Comparison__SymbolAssignment_1_1_0");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_1(), "rule__Comparison__SymbolAssignment_1_1_1");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_2(), "rule__Comparison__SymbolAssignment_1_1_2");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_3(), "rule__Comparison__SymbolAssignment_1_1_3");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_4(), "rule__Comparison__SymbolAssignment_1_1_4");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_5(), "rule__Comparison__SymbolAssignment_1_1_5");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_6(), "rule__Comparison__SymbolAssignment_1_1_6");
			builder.put(grammarAccess.getComparisonAccess().getSymbolAssignment_1_1_7(), "rule__Comparison__SymbolAssignment_1_1_7");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusAccess().getRightAssignment_1_2(), "rule__Plus__RightAssignment_1_2");
			builder.put(grammarAccess.getFactorAccess().getRightAssignment_1_2(), "rule__Factor__RightAssignment_1_2");
			builder.put(grammarAccess.getNegativeAccess().getExpressionAssignment_1_2(), "rule__Negative__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getNumericValueAccess().getValueAssignment(), "rule__NumericValue__ValueAssignment");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getVariableValueAccess().getValueAssignment(), "rule__VariableValue__ValueAssignment");
			builder.put(grammarAccess.getFunctionCallAccess().getNameAssignment_0(), "rule__FunctionCall__NameAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getParamsAssignment_2(), "rule__FunctionCall__ParamsAssignment_2");
			builder.put(grammarAccess.getFunctionCallAccess().getParamsAssignment_3_1(), "rule__FunctionCall__ParamsAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SmartCEGrammarAccess grammarAccess;

	@Override
	protected InternalSmartCEParser createParser() {
		InternalSmartCEParser result = new InternalSmartCEParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmartCEGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmartCEGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
