/*
 * generated by Xtext 2.26.0
 */
package br.edu.unijui.gca.smartce.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmartCEGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cContractsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContractsContractParserRuleCall_2_0 = (RuleCall)cContractsAssignment_2.eContents().get(0);
		
		//Model:
		//    {Model}
		//    imports+=Import*
		//    contracts+=Contract*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model}
		//imports+=Import*
		//contracts+=Contract*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//contracts+=Contract*
		public Assignment getContractsAssignment_2() { return cContractsAssignment_2; }
		
		//Contract
		public RuleCall getContractsContractParserRuleCall_2_0() { return cContractsContractParserRuleCall_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//     'import' importedNamespace=QualifiedNameWithWildcard
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBeginDateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBeginDateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBeginDateExpressionParserRuleCall_5_0 = (RuleCall)cBeginDateAssignment_5.eContents().get(0);
		private final Keyword cDueDateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDueDateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDueDateExpressionParserRuleCall_8_0 = (RuleCall)cDueDateAssignment_8.eContents().get(0);
		private final Keyword cPartiesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cApplicationKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cApplicationAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cApplicationApplicationParserRuleCall_13_0 = (RuleCall)cApplicationAssignment_13.eContents().get(0);
		private final Keyword cProcessKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cProcessAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cProcessProcessParserRuleCall_16_0 = (RuleCall)cProcessAssignment_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cVariablesKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Assignment cVariablesAssignment_18_2 = (Assignment)cGroup_18.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_18_2_0 = (RuleCall)cVariablesAssignment_18_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_18_3 = (Keyword)cGroup_18.eContents().get(3);
		private final Assignment cClausesAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cClausesClauseParserRuleCall_19_0 = (RuleCall)cClausesAssignment_19.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//Contract:
		//    'Contract' name=ID '{'
		//        'beginDate' '=' beginDate=Expression
		//        'dueDate' '=' dueDate=Expression
		//        'parties' '{'
		//            'application' '=' application=Application
		//            'process' '=' process=Process
		//        '}'
		//        ('variables' '{'
		//            variables+=Variable*
		//        '}')?
		//        clauses+=Clause
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Contract' name=ID '{'
		//    'beginDate' '=' beginDate=Expression
		//    'dueDate' '=' dueDate=Expression
		//    'parties' '{'
		//        'application' '=' application=Application
		//        'process' '=' process=Process
		//    '}'
		//    ('variables' '{'
		//        variables+=Variable*
		//    '}')?
		//    clauses+=Clause
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Contract'
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'beginDate'
		public Keyword getBeginDateKeyword_3() { return cBeginDateKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//beginDate=Expression
		public Assignment getBeginDateAssignment_5() { return cBeginDateAssignment_5; }
		
		//Expression
		public RuleCall getBeginDateExpressionParserRuleCall_5_0() { return cBeginDateExpressionParserRuleCall_5_0; }
		
		//'dueDate'
		public Keyword getDueDateKeyword_6() { return cDueDateKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//dueDate=Expression
		public Assignment getDueDateAssignment_8() { return cDueDateAssignment_8; }
		
		//Expression
		public RuleCall getDueDateExpressionParserRuleCall_8_0() { return cDueDateExpressionParserRuleCall_8_0; }
		
		//'parties'
		public Keyword getPartiesKeyword_9() { return cPartiesKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//'application'
		public Keyword getApplicationKeyword_11() { return cApplicationKeyword_11; }
		
		//'='
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//application=Application
		public Assignment getApplicationAssignment_13() { return cApplicationAssignment_13; }
		
		//Application
		public RuleCall getApplicationApplicationParserRuleCall_13_0() { return cApplicationApplicationParserRuleCall_13_0; }
		
		//'process'
		public Keyword getProcessKeyword_14() { return cProcessKeyword_14; }
		
		//'='
		public Keyword getEqualsSignKeyword_15() { return cEqualsSignKeyword_15; }
		
		//process=Process
		public Assignment getProcessAssignment_16() { return cProcessAssignment_16; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_16_0() { return cProcessProcessParserRuleCall_16_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
		
		//('variables' '{'
		//    variables+=Variable*
		//'}')?
		public Group getGroup_18() { return cGroup_18; }
		
		//'variables'
		public Keyword getVariablesKeyword_18_0() { return cVariablesKeyword_18_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_18_1() { return cLeftCurlyBracketKeyword_18_1; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_18_2() { return cVariablesAssignment_18_2; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_18_2_0() { return cVariablesVariableParserRuleCall_18_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18_3() { return cRightCurlyBracketKeyword_18_3; }
		
		//clauses+=Clause
		public Assignment getClausesAssignment_19() { return cClausesAssignment_19; }
		
		//Clause
		public RuleCall getClausesClauseParserRuleCall_19_0() { return cClausesClauseParserRuleCall_19_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_20() { return cRightCurlyBracketKeyword_20; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Variable:
		//    name=ID '=' expression+=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' expression+=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRightKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cProhibitionKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cObligationKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRolePlayerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cProcessKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cApplicationKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Keyword cOperationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOperationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOperationOperationEnumRuleCall_8_0 = (RuleCall)cOperationAssignment_8.eContents().get(0);
		private final Keyword cConditionKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConditionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConditionConditionParserRuleCall_11_0 = (RuleCall)cConditionAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cOnBreachKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cOnBreachAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cOnBreachOnBreachParserRuleCall_14_0 = (RuleCall)cOnBreachAssignment_14.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cOnSuccessKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cOnSuccessAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cOnSuccessOnSuccessParserRuleCall_15_1_0 = (RuleCall)cOnSuccessAssignment_15_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//Clause:
		//    ('Right' | 'Prohibition' | 'Obligation') name=ID '{'
		//        'rolePlayer' '=' ('process' | 'application')
		//        'operation' '=' operation=Operation
		//        'condition' '{'
		//            condition=Condition
		//        '}'
		//        'onBreach' onBreach=OnBreach ('onSuccess' onSuccess=OnSuccess)?
		//     '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('Right' | 'Prohibition' | 'Obligation') name=ID '{'
		//    'rolePlayer' '=' ('process' | 'application')
		//    'operation' '=' operation=Operation
		//    'condition' '{'
		//        condition=Condition
		//    '}'
		//    'onBreach' onBreach=OnBreach ('onSuccess' onSuccess=OnSuccess)?
		// '}'
		public Group getGroup() { return cGroup; }
		
		//('Right' | 'Prohibition' | 'Obligation')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'Right'
		public Keyword getRightKeyword_0_0() { return cRightKeyword_0_0; }
		
		//'Prohibition'
		public Keyword getProhibitionKeyword_0_1() { return cProhibitionKeyword_0_1; }
		
		//'Obligation'
		public Keyword getObligationKeyword_0_2() { return cObligationKeyword_0_2; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'rolePlayer'
		public Keyword getRolePlayerKeyword_3() { return cRolePlayerKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//('process' | 'application')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'process'
		public Keyword getProcessKeyword_5_0() { return cProcessKeyword_5_0; }
		
		//'application'
		public Keyword getApplicationKeyword_5_1() { return cApplicationKeyword_5_1; }
		
		//'operation'
		public Keyword getOperationKeyword_6() { return cOperationKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//operation=Operation
		public Assignment getOperationAssignment_8() { return cOperationAssignment_8; }
		
		//Operation
		public RuleCall getOperationOperationEnumRuleCall_8_0() { return cOperationOperationEnumRuleCall_8_0; }
		
		//'condition'
		public Keyword getConditionKeyword_9() { return cConditionKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//condition=Condition
		public Assignment getConditionAssignment_11() { return cConditionAssignment_11; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_11_0() { return cConditionConditionParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'onBreach'
		public Keyword getOnBreachKeyword_13() { return cOnBreachKeyword_13; }
		
		//onBreach=OnBreach
		public Assignment getOnBreachAssignment_14() { return cOnBreachAssignment_14; }
		
		//OnBreach
		public RuleCall getOnBreachOnBreachParserRuleCall_14_0() { return cOnBreachOnBreachParserRuleCall_14_0; }
		
		//('onSuccess' onSuccess=OnSuccess)?
		public Group getGroup_15() { return cGroup_15; }
		
		//'onSuccess'
		public Keyword getOnSuccessKeyword_15_0() { return cOnSuccessKeyword_15_0; }
		
		//onSuccess=OnSuccess
		public Assignment getOnSuccessAssignment_15_1() { return cOnSuccessAssignment_15_1; }
		
		//OnSuccess
		public RuleCall getOnSuccessOnSuccessParserRuleCall_15_1_0() { return cOnSuccessOnSuccessParserRuleCall_15_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBusinessRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//    BusinessRule | CompositeCondition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BusinessRule | CompositeCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BusinessRule
		public RuleCall getBusinessRuleParserRuleCall_0() { return cBusinessRuleParserRuleCall_0; }
		
		//CompositeCondition
		public RuleCall getCompositeConditionParserRuleCall_1() { return cCompositeConditionParserRuleCall_1; }
	}
	public class BusinessRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.BusinessRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationLimitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBusinessDayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeIntervalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMessageContentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSessionIntervalParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//BusinessRule:
		//    Timeout | OperationLimit | BusinessDay |TimeInterval | MessageContent | SessionInterval
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Timeout | OperationLimit | BusinessDay |TimeInterval | MessageContent | SessionInterval
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Timeout
		public RuleCall getTimeoutParserRuleCall_0() { return cTimeoutParserRuleCall_0; }
		
		//OperationLimit
		public RuleCall getOperationLimitParserRuleCall_1() { return cOperationLimitParserRuleCall_1; }
		
		//BusinessDay
		public RuleCall getBusinessDayParserRuleCall_2() { return cBusinessDayParserRuleCall_2; }
		
		//TimeInterval
		public RuleCall getTimeIntervalParserRuleCall_3() { return cTimeIntervalParserRuleCall_3; }
		
		//MessageContent
		public RuleCall getMessageContentParserRuleCall_4() { return cMessageContentParserRuleCall_4; }
		
		//SessionInterval
		public RuleCall getSessionIntervalParserRuleCall_5() { return cSessionIntervalParserRuleCall_5; }
	}
	public class CompositeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.CompositeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsBusinessRuleParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Assignment cLogicalOperatorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogicalOperatorsLogicalOperatorParserRuleCall_1_0 = (RuleCall)cLogicalOperatorsAssignment_1.eContents().get(0);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsBusinessRuleParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLogicalOperatorsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLogicalOperatorsLogicalOperatorParserRuleCall_3_0_0 = (RuleCall)cLogicalOperatorsAssignment_3_0.eContents().get(0);
		private final Assignment cConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionsBusinessRuleParserRuleCall_3_1_0 = (RuleCall)cConditionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLogicalOperatorsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLogicalOperatorsLogicalOperatorParserRuleCall_4_0_0 = (RuleCall)cLogicalOperatorsAssignment_4_0.eContents().get(0);
		private final Keyword cWhenKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cExpressionAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_4_3_0 = (RuleCall)cExpressionAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cCheckKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Alternatives cAlternatives_4_7 = (Alternatives)cGroup_4.eContents().get(7);
		private final Assignment cConditionsAssignment_4_7_0 = (Assignment)cAlternatives_4_7.eContents().get(0);
		private final RuleCall cConditionsBusinessRuleParserRuleCall_4_7_0_0 = (RuleCall)cConditionsAssignment_4_7_0.eContents().get(0);
		private final Group cGroup_4_7_1 = (Group)cAlternatives_4_7.eContents().get(1);
		private final Assignment cConditionsAssignment_4_7_1_0 = (Assignment)cGroup_4_7_1.eContents().get(0);
		private final RuleCall cConditionsBusinessRuleParserRuleCall_4_7_1_0_0 = (RuleCall)cConditionsAssignment_4_7_1_0.eContents().get(0);
		private final Assignment cLogicalOperatorsAssignment_4_7_1_1 = (Assignment)cGroup_4_7_1.eContents().get(1);
		private final RuleCall cLogicalOperatorsLogicalOperatorParserRuleCall_4_7_1_1_0 = (RuleCall)cLogicalOperatorsAssignment_4_7_1_1.eContents().get(0);
		private final Assignment cConditionsAssignment_4_7_1_2 = (Assignment)cGroup_4_7_1.eContents().get(2);
		private final RuleCall cConditionsBusinessRuleParserRuleCall_4_7_1_2_0 = (RuleCall)cConditionsAssignment_4_7_1_2.eContents().get(0);
		private final Group cGroup_4_7_1_3 = (Group)cGroup_4_7_1.eContents().get(3);
		private final Assignment cLogicalOperatorsAssignment_4_7_1_3_0 = (Assignment)cGroup_4_7_1_3.eContents().get(0);
		private final RuleCall cLogicalOperatorsLogicalOperatorParserRuleCall_4_7_1_3_0_0 = (RuleCall)cLogicalOperatorsAssignment_4_7_1_3_0.eContents().get(0);
		private final Assignment cConditionsAssignment_4_7_1_3_1 = (Assignment)cGroup_4_7_1_3.eContents().get(1);
		private final RuleCall cConditionsBusinessRuleParserRuleCall_4_7_1_3_1_0 = (RuleCall)cConditionsAssignment_4_7_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_8 = (Keyword)cGroup_4.eContents().get(8);
		
		////CompositeCondition:
		////    conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*
		////;
		//// alterando o compositeCondition
		//CompositeCondition:
		//    conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*
		//        (logicalOperators+=LogicalOperator
		//        'when' '('  expression+=Expression ')' 'check' '{'
		//            (
		//                conditions+=BusinessRule |
		//                (conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*)
		//            )
		//        '}'
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*
		//    (logicalOperators+=LogicalOperator
		//    'when' '('  expression+=Expression ')' 'check' '{'
		//        (
		//            conditions+=BusinessRule |
		//            (conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*)
		//        )
		//    '}'
		//)*
		public Group getGroup() { return cGroup; }
		
		//conditions+=BusinessRule
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }
		
		//BusinessRule
		public RuleCall getConditionsBusinessRuleParserRuleCall_0_0() { return cConditionsBusinessRuleParserRuleCall_0_0; }
		
		//logicalOperators+=LogicalOperator
		public Assignment getLogicalOperatorsAssignment_1() { return cLogicalOperatorsAssignment_1; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorsLogicalOperatorParserRuleCall_1_0() { return cLogicalOperatorsLogicalOperatorParserRuleCall_1_0; }
		
		//conditions+=BusinessRule
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//BusinessRule
		public RuleCall getConditionsBusinessRuleParserRuleCall_2_0() { return cConditionsBusinessRuleParserRuleCall_2_0; }
		
		//(logicalOperators+=LogicalOperator conditions+=BusinessRule)*
		public Group getGroup_3() { return cGroup_3; }
		
		//logicalOperators+=LogicalOperator
		public Assignment getLogicalOperatorsAssignment_3_0() { return cLogicalOperatorsAssignment_3_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorsLogicalOperatorParserRuleCall_3_0_0() { return cLogicalOperatorsLogicalOperatorParserRuleCall_3_0_0; }
		
		//conditions+=BusinessRule
		public Assignment getConditionsAssignment_3_1() { return cConditionsAssignment_3_1; }
		
		//BusinessRule
		public RuleCall getConditionsBusinessRuleParserRuleCall_3_1_0() { return cConditionsBusinessRuleParserRuleCall_3_1_0; }
		
		//    (logicalOperators+=LogicalOperator
		//    'when' '('  expression+=Expression ')' 'check' '{'
		//        (
		//            conditions+=BusinessRule |
		//            (conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*)
		//        )
		//    '}'
		//)*
		public Group getGroup_4() { return cGroup_4; }
		
		//logicalOperators+=LogicalOperator
		public Assignment getLogicalOperatorsAssignment_4_0() { return cLogicalOperatorsAssignment_4_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorsLogicalOperatorParserRuleCall_4_0_0() { return cLogicalOperatorsLogicalOperatorParserRuleCall_4_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_4_1() { return cWhenKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4_3() { return cExpressionAssignment_4_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_3_0() { return cExpressionExpressionParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//'check'
		public Keyword getCheckKeyword_4_5() { return cCheckKeyword_4_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_6() { return cLeftCurlyBracketKeyword_4_6; }
		
		//(
		//    conditions+=BusinessRule |
		//    (conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*)
		//)
		public Alternatives getAlternatives_4_7() { return cAlternatives_4_7; }
		
		//conditions+=BusinessRule
		public Assignment getConditionsAssignment_4_7_0() { return cConditionsAssignment_4_7_0; }
		
		//BusinessRule
		public RuleCall getConditionsBusinessRuleParserRuleCall_4_7_0_0() { return cConditionsBusinessRuleParserRuleCall_4_7_0_0; }
		
		//(conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*)
		public Group getGroup_4_7_1() { return cGroup_4_7_1; }
		
		//conditions+=BusinessRule
		public Assignment getConditionsAssignment_4_7_1_0() { return cConditionsAssignment_4_7_1_0; }
		
		//BusinessRule
		public RuleCall getConditionsBusinessRuleParserRuleCall_4_7_1_0_0() { return cConditionsBusinessRuleParserRuleCall_4_7_1_0_0; }
		
		//logicalOperators+=LogicalOperator
		public Assignment getLogicalOperatorsAssignment_4_7_1_1() { return cLogicalOperatorsAssignment_4_7_1_1; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorsLogicalOperatorParserRuleCall_4_7_1_1_0() { return cLogicalOperatorsLogicalOperatorParserRuleCall_4_7_1_1_0; }
		
		//conditions+=BusinessRule
		public Assignment getConditionsAssignment_4_7_1_2() { return cConditionsAssignment_4_7_1_2; }
		
		//BusinessRule
		public RuleCall getConditionsBusinessRuleParserRuleCall_4_7_1_2_0() { return cConditionsBusinessRuleParserRuleCall_4_7_1_2_0; }
		
		//(logicalOperators+=LogicalOperator conditions+=BusinessRule)*
		public Group getGroup_4_7_1_3() { return cGroup_4_7_1_3; }
		
		//logicalOperators+=LogicalOperator
		public Assignment getLogicalOperatorsAssignment_4_7_1_3_0() { return cLogicalOperatorsAssignment_4_7_1_3_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorsLogicalOperatorParserRuleCall_4_7_1_3_0_0() { return cLogicalOperatorsLogicalOperatorParserRuleCall_4_7_1_3_0_0; }
		
		//conditions+=BusinessRule
		public Assignment getConditionsAssignment_4_7_1_3_1() { return cConditionsAssignment_4_7_1_3_1; }
		
		//BusinessRule
		public RuleCall getConditionsBusinessRuleParserRuleCall_4_7_1_3_1_0() { return cConditionsBusinessRuleParserRuleCall_4_7_1_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_8() { return cRightCurlyBracketKeyword_4_8; }
	}
	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.LogicalOperator");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameANDKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameORKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameNOTKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		
		//LogicalOperator:
		//    name=('AND' | 'OR' | 'NOT')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=('AND' | 'OR' | 'NOT')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('AND' | 'OR' | 'NOT')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//'AND'
		public Keyword getNameANDKeyword_0_0() { return cNameANDKeyword_0_0; }
		
		//'OR'
		public Keyword getNameORKeyword_0_1() { return cNameORKeyword_0_1; }
		
		//'NOT'
		public Keyword getNameNOTKeyword_0_2() { return cNameNOTKeyword_0_2; }
	}
	public class TimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Timeout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Timeout:
		//    'Timeout' '(' value=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Timeout' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'Timeout'
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OperationLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.OperationLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationLimitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationsNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationsNumberINTTerminalRuleCall_2_0 = (RuleCall)cOperationsNumberAssignment_2.eContents().get(0);
		private final Keyword cByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimeUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_4_0 = (RuleCall)cTimeUnitAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OperationLimit:
		//    'OperationLimit' '(' operationsNumber=INT 'by' timeUnit=TimeUnit  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'OperationLimit' '(' operationsNumber=INT 'by' timeUnit=TimeUnit  ')'
		public Group getGroup() { return cGroup; }
		
		//'OperationLimit'
		public Keyword getOperationLimitKeyword_0() { return cOperationLimitKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operationsNumber=INT
		public Assignment getOperationsNumberAssignment_2() { return cOperationsNumberAssignment_2; }
		
		//INT
		public RuleCall getOperationsNumberINTTerminalRuleCall_2_0() { return cOperationsNumberINTTerminalRuleCall_2_0; }
		
		//'by'
		public Keyword getByKeyword_3() { return cByKeyword_3; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_4() { return cTimeUnitAssignment_4; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_4_0() { return cTimeUnitTimeUnitEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class BusinessDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.BusinessDay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBusinessDayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartWeekDayEnumRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndWeekDayEnumRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BusinessDay:
		//    ('BusinessDay' '(' start=WeekDay 'to' end=WeekDay ')')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('BusinessDay' '(' start=WeekDay 'to' end=WeekDay ')')
		public Group getGroup() { return cGroup; }
		
		//'BusinessDay'
		public Keyword getBusinessDayKeyword_0() { return cBusinessDayKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start=WeekDay
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//WeekDay
		public RuleCall getStartWeekDayEnumRuleCall_2_0() { return cStartWeekDayEnumRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//end=WeekDay
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//WeekDay
		public RuleCall getEndWeekDayEnumRuleCall_4_0() { return cEndWeekDayEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TimeIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.TimeInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeIntervalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimeInterval:
		//    'TimeInterval' '(' start=STRING 'to' end=STRING')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'TimeInterval' '(' start=STRING 'to' end=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'TimeInterval'
		public Keyword getTimeIntervalKeyword_0() { return cTimeIntervalKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start=STRING
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//STRING
		public RuleCall getStartSTRINGTerminalRuleCall_2_0() { return cStartSTRINGTerminalRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//end=STRING
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//STRING
		public RuleCall getEndSTRINGTerminalRuleCall_4_0() { return cEndSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SessionIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.SessionInterval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSessionIntervalKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFrequencyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFrequencyINTTerminalRuleCall_0_2_0 = (RuleCall)cFrequencyAssignment_0_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_0_3_0 = (RuleCall)cTimeUnitAssignment_0_3.eContents().get(0);
		private final Keyword cFromKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cStartAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cStartSTRINGTerminalRuleCall_0_5_0 = (RuleCall)cStartAssignment_0_5.eContents().get(0);
		private final Keyword cToKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cEndAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cEndSTRINGTerminalRuleCall_0_7_0 = (RuleCall)cEndAssignment_0_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSessionIntervalKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFrequencyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFrequencyINTTerminalRuleCall_1_2_0 = (RuleCall)cFrequencyAssignment_1_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_1_3_0 = (RuleCall)cTimeUnitAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//SessionInterval:
		//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'from' start=STRING 'to' end=STRING ')' )|
		//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit')')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'from' start=STRING 'to' end=STRING ')' )|
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit')')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'from' start=STRING 'to' end=STRING ')' )
		public Group getGroup_0() { return cGroup_0; }
		
		//'SessionInterval'
		public Keyword getSessionIntervalKeyword_0_0() { return cSessionIntervalKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_0_2() { return cFrequencyAssignment_0_2; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_0_2_0() { return cFrequencyINTTerminalRuleCall_0_2_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_0_3() { return cTimeUnitAssignment_0_3; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_0_3_0() { return cTimeUnitTimeUnitEnumRuleCall_0_3_0; }
		
		//'from'
		public Keyword getFromKeyword_0_4() { return cFromKeyword_0_4; }
		
		//start=STRING
		public Assignment getStartAssignment_0_5() { return cStartAssignment_0_5; }
		
		//STRING
		public RuleCall getStartSTRINGTerminalRuleCall_0_5_0() { return cStartSTRINGTerminalRuleCall_0_5_0; }
		
		//'to'
		public Keyword getToKeyword_0_6() { return cToKeyword_0_6; }
		
		//end=STRING
		public Assignment getEndAssignment_0_7() { return cEndAssignment_0_7; }
		
		//STRING
		public RuleCall getEndSTRINGTerminalRuleCall_0_7_0() { return cEndSTRINGTerminalRuleCall_0_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_8() { return cRightParenthesisKeyword_0_8; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'SessionInterval'
		public Keyword getSessionIntervalKeyword_1_0() { return cSessionIntervalKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_1_2() { return cFrequencyAssignment_1_2; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_1_2_0() { return cFrequencyINTTerminalRuleCall_1_2_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_1_3() { return cTimeUnitAssignment_1_3; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_1_3_0() { return cTimeUnitTimeUnitEnumRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class MessageContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.MessageContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMessageContentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cContentAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cContentAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMessageContentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cContentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cContentAssignment_1_2.eContents().get(0);
		private final Keyword cByKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTimeUnitAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_1_4_0 = (RuleCall)cTimeUnitAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMessageContentKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cContentAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cContentAssignment_2_2.eContents().get(0);
		private final Assignment cBinaryOperatorAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cBinaryOperatorBinaryOperatorParserRuleCall_2_3_0 = (RuleCall)cBinaryOperatorAssignment_2_3.eContents().get(0);
		private final Alternatives cAlternatives_2_4 = (Alternatives)cGroup_2.eContents().get(4);
		private final Assignment cStringValueAssignment_2_4_0 = (Assignment)cAlternatives_2_4.eContents().get(0);
		private final RuleCall cStringValueStringValueParserRuleCall_2_4_0_0 = (RuleCall)cStringValueAssignment_2_4_0.eContents().get(0);
		private final Assignment cVariableValueAssignment_2_4_1 = (Assignment)cAlternatives_2_4.eContents().get(1);
		private final RuleCall cVariableValueVariableValueParserRuleCall_2_4_1_0 = (RuleCall)cVariableValueAssignment_2_4_1.eContents().get(0);
		private final Assignment cNumericValueAssignment_2_4_2 = (Assignment)cAlternatives_2_4.eContents().get(2);
		private final RuleCall cNumericValueNumericValueParserRuleCall_2_4_2_0 = (RuleCall)cNumericValueAssignment_2_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cMessageContentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cContentAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cContentAssignment_3_2.eContents().get(0);
		private final Assignment cBinaryOperatorAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cBinaryOperatorBinaryOperatorParserRuleCall_3_3_0 = (RuleCall)cBinaryOperatorAssignment_3_3.eContents().get(0);
		private final Alternatives cAlternatives_3_4 = (Alternatives)cGroup_3.eContents().get(4);
		private final Assignment cStringValueAssignment_3_4_0 = (Assignment)cAlternatives_3_4.eContents().get(0);
		private final RuleCall cStringValueStringValueParserRuleCall_3_4_0_0 = (RuleCall)cStringValueAssignment_3_4_0.eContents().get(0);
		private final Assignment cVariableValueAssignment_3_4_1 = (Assignment)cAlternatives_3_4.eContents().get(1);
		private final RuleCall cVariableValueVariableValueParserRuleCall_3_4_1_0 = (RuleCall)cVariableValueAssignment_3_4_1.eContents().get(0);
		private final Assignment cNumericValueAssignment_3_4_2 = (Assignment)cAlternatives_3_4.eContents().get(2);
		private final RuleCall cNumericValueNumericValueParserRuleCall_3_4_2_0 = (RuleCall)cNumericValueAssignment_3_4_2.eContents().get(0);
		private final Keyword cByKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cTimeUnitAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_3_6_0 = (RuleCall)cTimeUnitAssignment_3_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		
		//MessageContent:
		//    ('MessageContent' '(' content=STRING ')') | /* Add an user help -> This field requires an xpath expression */
		//    ('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')') |
		//    ('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue)')' )|
		//    ('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue) 'by' timeUnit=TimeUnit')' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('MessageContent' '(' content=STRING ')') | /* Add an user help -> This field requires an xpath expression */
		//('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')') |
		//('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue)')' )|
		//('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue) 'by' timeUnit=TimeUnit')' )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('MessageContent' '(' content=STRING ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_0_0() { return cMessageContentKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//content=STRING
		public Assignment getContentAssignment_0_2() { return cContentAssignment_0_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_0_2_0() { return cContentSTRINGTerminalRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		///* Add an user help -> This field requires an xpath expression */
		//   ('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_1_0() { return cMessageContentKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//content=STRING
		public Assignment getContentAssignment_1_2() { return cContentAssignment_1_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_2_0() { return cContentSTRINGTerminalRuleCall_1_2_0; }
		
		//'by'
		public Keyword getByKeyword_1_3() { return cByKeyword_1_3; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_1_4() { return cTimeUnitAssignment_1_4; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_1_4_0() { return cTimeUnitTimeUnitEnumRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue)')' )
		public Group getGroup_2() { return cGroup_2; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_2_0() { return cMessageContentKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//content=STRING
		public Assignment getContentAssignment_2_2() { return cContentAssignment_2_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_2_0() { return cContentSTRINGTerminalRuleCall_2_2_0; }
		
		//binaryOperator=BinaryOperator
		public Assignment getBinaryOperatorAssignment_2_3() { return cBinaryOperatorAssignment_2_3; }
		
		//BinaryOperator
		public RuleCall getBinaryOperatorBinaryOperatorParserRuleCall_2_3_0() { return cBinaryOperatorBinaryOperatorParserRuleCall_2_3_0; }
		
		//(stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue)
		public Alternatives getAlternatives_2_4() { return cAlternatives_2_4; }
		
		//stringValue=StringValue
		public Assignment getStringValueAssignment_2_4_0() { return cStringValueAssignment_2_4_0; }
		
		//StringValue
		public RuleCall getStringValueStringValueParserRuleCall_2_4_0_0() { return cStringValueStringValueParserRuleCall_2_4_0_0; }
		
		//variableValue=VariableValue
		public Assignment getVariableValueAssignment_2_4_1() { return cVariableValueAssignment_2_4_1; }
		
		//VariableValue
		public RuleCall getVariableValueVariableValueParserRuleCall_2_4_1_0() { return cVariableValueVariableValueParserRuleCall_2_4_1_0; }
		
		//numericValue=NumericValue
		public Assignment getNumericValueAssignment_2_4_2() { return cNumericValueAssignment_2_4_2; }
		
		//NumericValue
		public RuleCall getNumericValueNumericValueParserRuleCall_2_4_2_0() { return cNumericValueNumericValueParserRuleCall_2_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
		
		//('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue) 'by' timeUnit=TimeUnit')' )
		public Group getGroup_3() { return cGroup_3; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_3_0() { return cMessageContentKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//content=STRING
		public Assignment getContentAssignment_3_2() { return cContentAssignment_3_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_3_2_0() { return cContentSTRINGTerminalRuleCall_3_2_0; }
		
		//binaryOperator=BinaryOperator
		public Assignment getBinaryOperatorAssignment_3_3() { return cBinaryOperatorAssignment_3_3; }
		
		//BinaryOperator
		public RuleCall getBinaryOperatorBinaryOperatorParserRuleCall_3_3_0() { return cBinaryOperatorBinaryOperatorParserRuleCall_3_3_0; }
		
		//(stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue)
		public Alternatives getAlternatives_3_4() { return cAlternatives_3_4; }
		
		//stringValue=StringValue
		public Assignment getStringValueAssignment_3_4_0() { return cStringValueAssignment_3_4_0; }
		
		//StringValue
		public RuleCall getStringValueStringValueParserRuleCall_3_4_0_0() { return cStringValueStringValueParserRuleCall_3_4_0_0; }
		
		//variableValue=VariableValue
		public Assignment getVariableValueAssignment_3_4_1() { return cVariableValueAssignment_3_4_1; }
		
		//VariableValue
		public RuleCall getVariableValueVariableValueParserRuleCall_3_4_1_0() { return cVariableValueVariableValueParserRuleCall_3_4_1_0; }
		
		//numericValue=NumericValue
		public Assignment getNumericValueAssignment_3_4_2() { return cNumericValueAssignment_3_4_2; }
		
		//NumericValue
		public RuleCall getNumericValueNumericValueParserRuleCall_3_4_2_0() { return cNumericValueNumericValueParserRuleCall_3_4_2_0; }
		
		//'by'
		public Keyword getByKeyword_3_5() { return cByKeyword_3_5; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_3_6() { return cTimeUnitAssignment_3_6; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_3_6_0() { return cTimeUnitTimeUnitEnumRuleCall_3_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_7() { return cRightParenthesisKeyword_3_7; }
	}
	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSymbolLessThanSignEqualsSignKeyword_0_0 = (Keyword)cSymbolAssignment_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSymbolGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cSymbolAssignment_1.eContents().get(0);
		private final Assignment cSymbolAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSymbolGreaterThanSignKeyword_2_0 = (Keyword)cSymbolAssignment_2.eContents().get(0);
		private final Assignment cSymbolAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cSymbolLessThanSignKeyword_3_0 = (Keyword)cSymbolAssignment_3.eContents().get(0);
		private final Assignment cSymbolAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSymbolExclamationMarkEqualsSignKeyword_4_0 = (Keyword)cSymbolAssignment_4.eContents().get(0);
		private final Assignment cSymbolAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cSymbolEqualsSignEqualsSignKeyword_5_0 = (Keyword)cSymbolAssignment_5.eContents().get(0);
		
		//// ****************************************************************************
		//// ---- temporary solution to set the string "application" or "process" to rolePlayer-----
		///*enum Parties:
		//    APPLICATION='application'| PROCESS='process'
		//;*/
		//// ----------------- Add the binary operator -------------------------
		//BinaryOperator:
		//symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//    | symbol='=='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//    | symbol='=='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//symbol='<='
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }
		
		//'<='
		public Keyword getSymbolLessThanSignEqualsSignKeyword_0_0() { return cSymbolLessThanSignEqualsSignKeyword_0_0; }
		
		//symbol='>='
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//'>='
		public Keyword getSymbolGreaterThanSignEqualsSignKeyword_1_0() { return cSymbolGreaterThanSignEqualsSignKeyword_1_0; }
		
		//symbol='>'
		public Assignment getSymbolAssignment_2() { return cSymbolAssignment_2; }
		
		//'>'
		public Keyword getSymbolGreaterThanSignKeyword_2_0() { return cSymbolGreaterThanSignKeyword_2_0; }
		
		//symbol='<'
		public Assignment getSymbolAssignment_3() { return cSymbolAssignment_3; }
		
		//'<'
		public Keyword getSymbolLessThanSignKeyword_3_0() { return cSymbolLessThanSignKeyword_3_0; }
		
		//symbol='!='
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//'!='
		public Keyword getSymbolExclamationMarkEqualsSignKeyword_4_0() { return cSymbolExclamationMarkEqualsSignKeyword_4_0; }
		
		//symbol='=='
		public Assignment getSymbolAssignment_5() { return cSymbolAssignment_5; }
		
		//'=='
		public Keyword getSymbolEqualsSignEqualsSignKeyword_5_0() { return cSymbolEqualsSignEqualsSignKeyword_5_0; }
	}
	public class PartyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Party");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cApplicationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ****************************************************************************
		//Party:
		//    Application | Process
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Application | Process
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Application
		public RuleCall getApplicationParserRuleCall_0() { return cApplicationParserRuleCall_0; }
		
		//Process
		public RuleCall getProcessParserRuleCall_1() { return cProcessParserRuleCall_1; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Application");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Application:
		//    name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Process");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Process:
		//    name=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class OnSuccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.OnSuccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageExpressionParserRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OnSuccess:
		//    '(' action=Action '(' message=Expression ')' ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' action=Action '(' message=Expression ')' ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//action=Action
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_1_0() { return cActionActionParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//message=Expression
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//Expression
		public RuleCall getMessageExpressionParserRuleCall_3_0() { return cMessageExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class OnBreachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.OnBreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageExpressionParserRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OnBreach:
		//     '(' action=Action '(' message=Expression ')' ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' action=Action '(' message=Expression ')' ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//action=Action
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_1_0() { return cActionActionParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//message=Expression
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//Expression
		public RuleCall getMessageExpressionParserRuleCall_3_0() { return cMessageExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBusinessActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventLogParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action:
		//    BusinessAction | EventLog;
		@Override public ParserRule getRule() { return rule; }
		
		//BusinessAction | EventLog
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BusinessAction
		public RuleCall getBusinessActionParserRuleCall_0() { return cBusinessActionParserRuleCall_0; }
		
		//EventLog
		public RuleCall getEventLogParserRuleCall_1() { return cEventLogParserRuleCall_1; }
	}
	public class BusinessActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.BusinessAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBusinessActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BusinessAction:
		//    'BusinessAction' name=ID //'(' parameters+=Variable (',' parameters+=Variable)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'BusinessAction' name=ID
		public Group getGroup() { return cGroup; }
		
		//'BusinessAction'
		public Keyword getBusinessActionKeyword_0() { return cBusinessActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EventLogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.EventLog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventLogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EventLog:
		//    'EventLog' name=ID    //'(' parameters+=Variable (',' parameters+=Variable)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'EventLog' name=ID
		public Group getGroup() { return cGroup; }
		
		//'EventLog'
		public Keyword getEventLogKeyword_0() { return cEventLogKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolVerticalLineVerticalLineKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//    Negation ({BinaryOperator.left=current} (symbol='&&' | symbol="||") right=Negation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Negation ({BinaryOperator.left=current} (symbol='&&' | symbol="||") right=Negation)*
		public Group getGroup() { return cGroup; }
		
		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }
		
		//({BinaryOperator.left=current} (symbol='&&' | symbol="||") right=Negation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//(symbol='&&' | symbol="||")
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//symbol='&&'
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }
		
		//'&&'
		public Keyword getSymbolAmpersandAmpersandKeyword_1_1_0_0() { return cSymbolAmpersandAmpersandKeyword_1_1_0_0; }
		
		//symbol="||"
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }
		
		//"||"
		public Keyword getSymbolVerticalLineVerticalLineKeyword_1_1_1_0() { return cSymbolVerticalLineVerticalLineKeyword_1_1_1_0; }
		
		//right=Negation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Negation
		public RuleCall getRightNegationParserRuleCall_1_2_0() { return cRightNegationParserRuleCall_1_2_0; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Negation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSymbolExclamationMarkKeyword_1_1_0 = (Keyword)cSymbolAssignment_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionComparisonParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Negation returns Expression:
		//    Comparison | {UnaryOperator} symbol='!' expression=Comparison;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison | {UnaryOperator} symbol='!' expression=Comparison
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//{UnaryOperator} symbol='!' expression=Comparison
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryOperator}
		public Action getUnaryOperatorAction_1_0() { return cUnaryOperatorAction_1_0; }
		
		//symbol='!'
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }
		
		//'!'
		public Keyword getSymbolExclamationMarkKeyword_1_1_0() { return cSymbolExclamationMarkKeyword_1_1_0; }
		
		//expression=Comparison
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Comparison
		public RuleCall getExpressionComparisonParserRuleCall_1_2_0() { return cExpressionComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolLessThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cSymbolGreaterThanSignKeyword_1_1_2_0 = (Keyword)cSymbolAssignment_1_1_2.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final Keyword cSymbolLessThanSignKeyword_1_1_3_0 = (Keyword)cSymbolAssignment_1_1_3.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final Keyword cSymbolExclamationMarkEqualsSignKeyword_1_1_4_0 = (Keyword)cSymbolAssignment_1_1_4.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_5 = (Assignment)cAlternatives_1_1.eContents().get(5);
		private final Keyword cSymbolEqualsSignEqualsSignKeyword_1_1_5_0 = (Keyword)cSymbolAssignment_1_1_5.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_6 = (Assignment)cAlternatives_1_1.eContents().get(6);
		private final Keyword cSymbolIsKeyword_1_1_6_0 = (Keyword)cSymbolAssignment_1_1_6.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_7 = (Assignment)cAlternatives_1_1.eContents().get(7);
		private final Keyword cSymbolAsKeyword_1_1_7_0 = (Keyword)cSymbolAssignment_1_1_7.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//    Plus ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//    | symbol='==' | symbol='is' | symbol='as') right=Plus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Plus ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//| symbol='==' | symbol='is' | symbol='as') right=Plus)*
		public Group getGroup() { return cGroup; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_0() { return cPlusParserRuleCall_0; }
		
		//({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//   | symbol='==' | symbol='is' | symbol='as') right=Plus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//(symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
		//   | symbol='==' | symbol='is' | symbol='as')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//symbol='<='
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }
		
		//'<='
		public Keyword getSymbolLessThanSignEqualsSignKeyword_1_1_0_0() { return cSymbolLessThanSignEqualsSignKeyword_1_1_0_0; }
		
		//symbol='>='
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }
		
		//'>='
		public Keyword getSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0() { return cSymbolGreaterThanSignEqualsSignKeyword_1_1_1_0; }
		
		//symbol='>'
		public Assignment getSymbolAssignment_1_1_2() { return cSymbolAssignment_1_1_2; }
		
		//'>'
		public Keyword getSymbolGreaterThanSignKeyword_1_1_2_0() { return cSymbolGreaterThanSignKeyword_1_1_2_0; }
		
		//symbol='<'
		public Assignment getSymbolAssignment_1_1_3() { return cSymbolAssignment_1_1_3; }
		
		//'<'
		public Keyword getSymbolLessThanSignKeyword_1_1_3_0() { return cSymbolLessThanSignKeyword_1_1_3_0; }
		
		//symbol='!='
		public Assignment getSymbolAssignment_1_1_4() { return cSymbolAssignment_1_1_4; }
		
		//'!='
		public Keyword getSymbolExclamationMarkEqualsSignKeyword_1_1_4_0() { return cSymbolExclamationMarkEqualsSignKeyword_1_1_4_0; }
		
		//symbol='=='
		public Assignment getSymbolAssignment_1_1_5() { return cSymbolAssignment_1_1_5; }
		
		//'=='
		public Keyword getSymbolEqualsSignEqualsSignKeyword_1_1_5_0() { return cSymbolEqualsSignEqualsSignKeyword_1_1_5_0; }
		
		//symbol='is'
		public Assignment getSymbolAssignment_1_1_6() { return cSymbolAssignment_1_1_6; }
		
		//'is'
		public Keyword getSymbolIsKeyword_1_1_6_0() { return cSymbolIsKeyword_1_1_6_0; }
		
		//symbol='as'
		public Assignment getSymbolAssignment_1_1_7() { return cSymbolAssignment_1_1_7; }
		
		//'as'
		public Keyword getSymbolAsKeyword_1_1_7_0() { return cSymbolAsKeyword_1_1_7_0; }
		
		//right=Plus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Plus
		public RuleCall getRightPlusParserRuleCall_1_2_0() { return cRightPlusParserRuleCall_1_2_0; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Plus returns Expression:
		//    Factor ({BinaryOperator.left=current} ('+' | '-') right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({BinaryOperator.left=current} ('+' | '-') right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({BinaryOperator.left=current} ('+' | '-') right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//('+' | '-')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegativeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Factor returns Expression:
		//    Negative ({BinaryOperator.left=current} ('*' | '/') right=Negative)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Negative ({BinaryOperator.left=current} ('*' | '/') right=Negative)*
		public Group getGroup() { return cGroup; }
		
		//Negative
		public RuleCall getNegativeParserRuleCall_0() { return cNegativeParserRuleCall_0; }
		
		//({BinaryOperator.left=current} ('*' | '/') right=Negative)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOperator.left=current}
		public Action getBinaryOperatorLeftAction_1_0() { return cBinaryOperatorLeftAction_1_0; }
		
		//('*' | '/')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=Negative
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Negative
		public RuleCall getRightNegativeParserRuleCall_1_2_0() { return cRightNegativeParserRuleCall_1_2_0; }
	}
	public class NegativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Negative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Negative returns Expression:
		//    Primary | {UnaryOperator} '-' expression=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary | {UnaryOperator} '-' expression=Primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//{UnaryOperator} '-' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryOperator}
		public Action getUnaryOperatorAction_1_0() { return cUnaryOperatorAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Expression:
		//    LiteralValue | '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralValue | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_0() { return cLiteralValueParserRuleCall_0; }
		
		//'(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.LiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LiteralValue:
		//    NumericValue | StringValue | VariableValue | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericValue | StringValue | VariableValue | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericValue
		public RuleCall getNumericValueParserRuleCall_0() { return cNumericValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//VariableValue
		public RuleCall getVariableValueParserRuleCall_2() { return cVariableValueParserRuleCall_2; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }
	}
	public class NumericValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.NumericValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumericValue:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.VariableValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueQualifiedNameParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//VariableValue:
		//    value=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//value=QualifiedName
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//QualifiedName
		public RuleCall getValueQualifiedNameParserRuleCall_0() { return cValueQualifiedNameParserRuleCall_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsExpressionParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//    name=QualifiedName '(' params+=Expression (',' params+=Expression)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName '(' params+=Expression (',' params+=Expression)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//params+=Expression
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_0() { return cParamsExpressionParserRuleCall_2_0; }
		
		//(',' params+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//params+=Expression
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }
		
		//Expression
		public RuleCall getParamsExpressionParserRuleCall_3_1_0() { return cParamsExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//    QualifiedName '.*';
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.DATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cYEARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cMONTHParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cDAYParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cTKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cHOURParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cMINParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final RuleCall cSECParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//DATE: YEAR'-'MONTH'-'DAY'T'HOUR':'MIN':'SEC;
		@Override public ParserRule getRule() { return rule; }
		
		//YEAR'-'MONTH'-'DAY'T'HOUR':'MIN':'SEC
		public Group getGroup() { return cGroup; }
		
		//YEAR
		public RuleCall getYEARParserRuleCall_0() { return cYEARParserRuleCall_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//MONTH
		public RuleCall getMONTHParserRuleCall_2() { return cMONTHParserRuleCall_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//DAY
		public RuleCall getDAYParserRuleCall_4() { return cDAYParserRuleCall_4; }
		
		//'T'
		public Keyword getTKeyword_5() { return cTKeyword_5; }
		
		//HOUR
		public RuleCall getHOURParserRuleCall_6() { return cHOURParserRuleCall_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//MIN
		public RuleCall getMINParserRuleCall_8() { return cMINParserRuleCall_8; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//SEC
		public RuleCall getSECParserRuleCall_10() { return cSECParserRuleCall_10; }
	}
	public class YEARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.YEAR");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//YEAR: INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class MONTHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.MONTH");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MONTH: INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class DAYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.DAY");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DAY: INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class HOURElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.HOUR");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HOUR: INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class MINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.MIN");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MIN: INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class SECElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.SEC");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SEC: INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	public class OperationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUSHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUSHPushKeyword_0_0 = (Keyword)cPUSHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPOLLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPOLLPollKeyword_1_0 = (Keyword)cPOLLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWRITEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWRITEWriteKeyword_2_0 = (Keyword)cWRITEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREADEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREADReadKeyword_3_0 = (Keyword)cREADEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cREQUESTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cREQUESTRequestKeyword_4_0 = (Keyword)cREQUESTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRESPONSEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRESPONSEResponseKeyword_5_0 = (Keyword)cRESPONSEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Operation:
		//    PUSH='push' | POLL='poll' | WRITE='write' | READ = 'read' | REQUEST='request' | RESPONSE='response'
		//;
		public EnumRule getRule() { return rule; }
		
		//PUSH='push' | POLL='poll' | WRITE='write' | READ = 'read' | REQUEST='request' | RESPONSE='response'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUSH='push'
		public EnumLiteralDeclaration getPUSHEnumLiteralDeclaration_0() { return cPUSHEnumLiteralDeclaration_0; }
		
		//'push'
		public Keyword getPUSHPushKeyword_0_0() { return cPUSHPushKeyword_0_0; }
		
		//POLL='poll'
		public EnumLiteralDeclaration getPOLLEnumLiteralDeclaration_1() { return cPOLLEnumLiteralDeclaration_1; }
		
		//'poll'
		public Keyword getPOLLPollKeyword_1_0() { return cPOLLPollKeyword_1_0; }
		
		//WRITE='write'
		public EnumLiteralDeclaration getWRITEEnumLiteralDeclaration_2() { return cWRITEEnumLiteralDeclaration_2; }
		
		//'write'
		public Keyword getWRITEWriteKeyword_2_0() { return cWRITEWriteKeyword_2_0; }
		
		//READ = 'read'
		public EnumLiteralDeclaration getREADEnumLiteralDeclaration_3() { return cREADEnumLiteralDeclaration_3; }
		
		//'read'
		public Keyword getREADReadKeyword_3_0() { return cREADReadKeyword_3_0; }
		
		//REQUEST='request'
		public EnumLiteralDeclaration getREQUESTEnumLiteralDeclaration_4() { return cREQUESTEnumLiteralDeclaration_4; }
		
		//'request'
		public Keyword getREQUESTRequestKeyword_4_0() { return cREQUESTRequestKeyword_4_0; }
		
		//RESPONSE='response'
		public EnumLiteralDeclaration getRESPONSEEnumLiteralDeclaration_5() { return cRESPONSEEnumLiteralDeclaration_5; }
		
		//'response'
		public Keyword getRESPONSEResponseKeyword_5_0() { return cRESPONSEResponseKeyword_5_0; }
	}
	public class WeekDayElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.WeekDay");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUNDAYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUNDAYSundayKeyword_0_0 = (Keyword)cSUNDAYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMONDAYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMONDAYMondayKeyword_1_0 = (Keyword)cMONDAYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTUESDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTUESDAYTuesdayKeyword_2_0 = (Keyword)cTUESDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEDNESDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEDNESDAYWednesdayKeyword_3_0 = (Keyword)cWEDNESDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTHURSDAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTHURSDAYThursdayKeyword_4_0 = (Keyword)cTHURSDAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFRIDAYEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFRIDAYFridayKeyword_5_0 = (Keyword)cFRIDAYEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSATURDAYEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSATURDAYSaturdayKeyword_6_0 = (Keyword)cSATURDAYEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum WeekDay:
		//    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
		//;
		public EnumRule getRule() { return rule; }
		
		//SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUNDAY='Sunday'
		public EnumLiteralDeclaration getSUNDAYEnumLiteralDeclaration_0() { return cSUNDAYEnumLiteralDeclaration_0; }
		
		//'Sunday'
		public Keyword getSUNDAYSundayKeyword_0_0() { return cSUNDAYSundayKeyword_0_0; }
		
		//MONDAY='Monday'
		public EnumLiteralDeclaration getMONDAYEnumLiteralDeclaration_1() { return cMONDAYEnumLiteralDeclaration_1; }
		
		//'Monday'
		public Keyword getMONDAYMondayKeyword_1_0() { return cMONDAYMondayKeyword_1_0; }
		
		//TUESDAY='Tuesday'
		public EnumLiteralDeclaration getTUESDAYEnumLiteralDeclaration_2() { return cTUESDAYEnumLiteralDeclaration_2; }
		
		//'Tuesday'
		public Keyword getTUESDAYTuesdayKeyword_2_0() { return cTUESDAYTuesdayKeyword_2_0; }
		
		//WEDNESDAY = 'Wednesday'
		public EnumLiteralDeclaration getWEDNESDAYEnumLiteralDeclaration_3() { return cWEDNESDAYEnumLiteralDeclaration_3; }
		
		//'Wednesday'
		public Keyword getWEDNESDAYWednesdayKeyword_3_0() { return cWEDNESDAYWednesdayKeyword_3_0; }
		
		//THURSDAY='Thursday'
		public EnumLiteralDeclaration getTHURSDAYEnumLiteralDeclaration_4() { return cTHURSDAYEnumLiteralDeclaration_4; }
		
		//'Thursday'
		public Keyword getTHURSDAYThursdayKeyword_4_0() { return cTHURSDAYThursdayKeyword_4_0; }
		
		//FRIDAY='Friday'
		public EnumLiteralDeclaration getFRIDAYEnumLiteralDeclaration_5() { return cFRIDAYEnumLiteralDeclaration_5; }
		
		//'Friday'
		public Keyword getFRIDAYFridayKeyword_5_0() { return cFRIDAYFridayKeyword_5_0; }
		
		//SATURDAY='Saturday'
		public EnumLiteralDeclaration getSATURDAYEnumLiteralDeclaration_6() { return cSATURDAYEnumLiteralDeclaration_6; }
		
		//'Saturday'
		public Keyword getSATURDAYSaturdayKeyword_6_0() { return cSATURDAYSaturdayKeyword_6_0; }
	}
	public class TimeUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.edu.unijui.gca.smartce.SmartCE.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSecondKeyword_0_0 = (Keyword)cSECONDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTEMinuteKeyword_1_0 = (Keyword)cMINUTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURHourKeyword_2_0 = (Keyword)cHOUREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYDayKeyword_3_0 = (Keyword)cDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWEEKWeekKeyword_4_0 = (Keyword)cWEEKEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMONTHMonthKeyword_5_0 = (Keyword)cMONTHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cYEAREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cYEARYearKeyword_6_0 = (Keyword)cYEAREnumLiteralDeclaration_6.eContents().get(0);
		
		//enum TimeUnit:
		//    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
		//;
		public EnumRule getRule() { return rule; }
		
		//SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECOND='Second'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_0() { return cSECONDEnumLiteralDeclaration_0; }
		
		//'Second'
		public Keyword getSECONDSecondKeyword_0_0() { return cSECONDSecondKeyword_0_0; }
		
		//MINUTE='Minute'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_1() { return cMINUTEEnumLiteralDeclaration_1; }
		
		//'Minute'
		public Keyword getMINUTEMinuteKeyword_1_0() { return cMINUTEMinuteKeyword_1_0; }
		
		//HOUR = 'Hour'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_2() { return cHOUREnumLiteralDeclaration_2; }
		
		//'Hour'
		public Keyword getHOURHourKeyword_2_0() { return cHOURHourKeyword_2_0; }
		
		//DAY='Day'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_3() { return cDAYEnumLiteralDeclaration_3; }
		
		//'Day'
		public Keyword getDAYDayKeyword_3_0() { return cDAYDayKeyword_3_0; }
		
		//WEEK='Week'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_4() { return cWEEKEnumLiteralDeclaration_4; }
		
		//'Week'
		public Keyword getWEEKWeekKeyword_4_0() { return cWEEKWeekKeyword_4_0; }
		
		//MONTH='Month'
		public EnumLiteralDeclaration getMONTHEnumLiteralDeclaration_5() { return cMONTHEnumLiteralDeclaration_5; }
		
		//'Month'
		public Keyword getMONTHMonthKeyword_5_0() { return cMONTHMonthKeyword_5_0; }
		
		//YEAR='Year'
		public EnumLiteralDeclaration getYEAREnumLiteralDeclaration_6() { return cYEAREnumLiteralDeclaration_6; }
		
		//'Year'
		public Keyword getYEARYearKeyword_6_0() { return cYEARYearKeyword_6_0; }
	}
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final ContractElements pContract;
	private final VariableElements pVariable;
	private final ClauseElements pClause;
	private final OperationElements eOperation;
	private final ConditionElements pCondition;
	private final BusinessRuleElements pBusinessRule;
	private final CompositeConditionElements pCompositeCondition;
	private final LogicalOperatorElements pLogicalOperator;
	private final TimeoutElements pTimeout;
	private final OperationLimitElements pOperationLimit;
	private final BusinessDayElements pBusinessDay;
	private final WeekDayElements eWeekDay;
	private final TimeUnitElements eTimeUnit;
	private final TimeIntervalElements pTimeInterval;
	private final SessionIntervalElements pSessionInterval;
	private final MessageContentElements pMessageContent;
	private final BinaryOperatorElements pBinaryOperator;
	private final PartyElements pParty;
	private final ApplicationElements pApplication;
	private final ProcessElements pProcess;
	private final OnSuccessElements pOnSuccess;
	private final OnBreachElements pOnBreach;
	private final ActionElements pAction;
	private final BusinessActionElements pBusinessAction;
	private final EventLogElements pEventLog;
	private final ExpressionElements pExpression;
	private final NegationElements pNegation;
	private final ComparisonElements pComparison;
	private final PlusElements pPlus;
	private final FactorElements pFactor;
	private final NegativeElements pNegative;
	private final PrimaryElements pPrimary;
	private final LiteralValueElements pLiteralValue;
	private final NumericValueElements pNumericValue;
	private final StringValueElements pStringValue;
	private final VariableValueElements pVariableValue;
	private final FunctionCallElements pFunctionCall;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final DATEElements pDATE;
	private final YEARElements pYEAR;
	private final MONTHElements pMONTH;
	private final DAYElements pDAY;
	private final HOURElements pHOUR;
	private final MINElements pMIN;
	private final SECElements pSEC;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmartCEGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pContract = new ContractElements();
		this.pVariable = new VariableElements();
		this.pClause = new ClauseElements();
		this.eOperation = new OperationElements();
		this.pCondition = new ConditionElements();
		this.pBusinessRule = new BusinessRuleElements();
		this.pCompositeCondition = new CompositeConditionElements();
		this.pLogicalOperator = new LogicalOperatorElements();
		this.pTimeout = new TimeoutElements();
		this.pOperationLimit = new OperationLimitElements();
		this.pBusinessDay = new BusinessDayElements();
		this.eWeekDay = new WeekDayElements();
		this.eTimeUnit = new TimeUnitElements();
		this.pTimeInterval = new TimeIntervalElements();
		this.pSessionInterval = new SessionIntervalElements();
		this.pMessageContent = new MessageContentElements();
		this.pBinaryOperator = new BinaryOperatorElements();
		this.pParty = new PartyElements();
		this.pApplication = new ApplicationElements();
		this.pProcess = new ProcessElements();
		this.pOnSuccess = new OnSuccessElements();
		this.pOnBreach = new OnBreachElements();
		this.pAction = new ActionElements();
		this.pBusinessAction = new BusinessActionElements();
		this.pEventLog = new EventLogElements();
		this.pExpression = new ExpressionElements();
		this.pNegation = new NegationElements();
		this.pComparison = new ComparisonElements();
		this.pPlus = new PlusElements();
		this.pFactor = new FactorElements();
		this.pNegative = new NegativeElements();
		this.pPrimary = new PrimaryElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pNumericValue = new NumericValueElements();
		this.pStringValue = new StringValueElements();
		this.pVariableValue = new VariableValueElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pDATE = new DATEElements();
		this.pYEAR = new YEARElements();
		this.pMONTH = new MONTHElements();
		this.pDAY = new DAYElements();
		this.pHOUR = new HOURElements();
		this.pMIN = new MINElements();
		this.pSEC = new SECElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.edu.unijui.gca.smartce.SmartCE".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    {Model}
	//    imports+=Import*
	//    contracts+=Contract*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import:
	//     'import' importedNamespace=QualifiedNameWithWildcard
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Contract:
	//    'Contract' name=ID '{'
	//        'beginDate' '=' beginDate=Expression
	//        'dueDate' '=' dueDate=Expression
	//        'parties' '{'
	//            'application' '=' application=Application
	//            'process' '=' process=Process
	//        '}'
	//        ('variables' '{'
	//            variables+=Variable*
	//        '}')?
	//        clauses+=Clause
	//    '}';
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//Variable:
	//    name=ID '=' expression+=Expression
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Clause:
	//    ('Right' | 'Prohibition' | 'Obligation') name=ID '{'
	//        'rolePlayer' '=' ('process' | 'application')
	//        'operation' '=' operation=Operation
	//        'condition' '{'
	//            condition=Condition
	//        '}'
	//        'onBreach' onBreach=OnBreach ('onSuccess' onSuccess=OnSuccess)?
	//     '}'
	//;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//enum Operation:
	//    PUSH='push' | POLL='poll' | WRITE='write' | READ = 'read' | REQUEST='request' | RESPONSE='response'
	//;
	public OperationElements getOperationAccess() {
		return eOperation;
	}
	
	public EnumRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Condition:
	//    BusinessRule | CompositeCondition
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//BusinessRule:
	//    Timeout | OperationLimit | BusinessDay |TimeInterval | MessageContent | SessionInterval
	//;
	public BusinessRuleElements getBusinessRuleAccess() {
		return pBusinessRule;
	}
	
	public ParserRule getBusinessRuleRule() {
		return getBusinessRuleAccess().getRule();
	}
	
	////CompositeCondition:
	////    conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*
	////;
	//// alterando o compositeCondition
	//CompositeCondition:
	//    conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*
	//        (logicalOperators+=LogicalOperator
	//        'when' '('  expression+=Expression ')' 'check' '{'
	//            (
	//                conditions+=BusinessRule |
	//                (conditions+=BusinessRule logicalOperators+=LogicalOperator conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*)
	//            )
	//        '}'
	//    )*
	//;
	public CompositeConditionElements getCompositeConditionAccess() {
		return pCompositeCondition;
	}
	
	public ParserRule getCompositeConditionRule() {
		return getCompositeConditionAccess().getRule();
	}
	
	//LogicalOperator:
	//    name=('AND' | 'OR' | 'NOT')
	//;
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return pLogicalOperator;
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//Timeout:
	//    'Timeout' '(' value=INT ')'
	//;
	public TimeoutElements getTimeoutAccess() {
		return pTimeout;
	}
	
	public ParserRule getTimeoutRule() {
		return getTimeoutAccess().getRule();
	}
	
	//OperationLimit:
	//    'OperationLimit' '(' operationsNumber=INT 'by' timeUnit=TimeUnit  ')'
	//;
	public OperationLimitElements getOperationLimitAccess() {
		return pOperationLimit;
	}
	
	public ParserRule getOperationLimitRule() {
		return getOperationLimitAccess().getRule();
	}
	
	//BusinessDay:
	//    ('BusinessDay' '(' start=WeekDay 'to' end=WeekDay ')')
	//;
	public BusinessDayElements getBusinessDayAccess() {
		return pBusinessDay;
	}
	
	public ParserRule getBusinessDayRule() {
		return getBusinessDayAccess().getRule();
	}
	
	//enum WeekDay:
	//    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
	//;
	public WeekDayElements getWeekDayAccess() {
		return eWeekDay;
	}
	
	public EnumRule getWeekDayRule() {
		return getWeekDayAccess().getRule();
	}
	
	//enum TimeUnit:
	//    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
	//;
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//TimeInterval:
	//    'TimeInterval' '(' start=STRING 'to' end=STRING')'
	//;
	public TimeIntervalElements getTimeIntervalAccess() {
		return pTimeInterval;
	}
	
	public ParserRule getTimeIntervalRule() {
		return getTimeIntervalAccess().getRule();
	}
	
	//SessionInterval:
	//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'from' start=STRING 'to' end=STRING ')' )|
	//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit')')
	//;
	public SessionIntervalElements getSessionIntervalAccess() {
		return pSessionInterval;
	}
	
	public ParserRule getSessionIntervalRule() {
		return getSessionIntervalAccess().getRule();
	}
	
	//MessageContent:
	//    ('MessageContent' '(' content=STRING ')') | /* Add an user help -> This field requires an xpath expression */
	//    ('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')') |
	//    ('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue)')' )|
	//    ('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue) 'by' timeUnit=TimeUnit')' )
	//;
	public MessageContentElements getMessageContentAccess() {
		return pMessageContent;
	}
	
	public ParserRule getMessageContentRule() {
		return getMessageContentAccess().getRule();
	}
	
	//// ****************************************************************************
	//// ---- temporary solution to set the string "application" or "process" to rolePlayer-----
	///*enum Parties:
	//    APPLICATION='application'| PROCESS='process'
	//;*/
	//// ----------------- Add the binary operator -------------------------
	//BinaryOperator:
	//symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
	//    | symbol='=='
	//;
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return pBinaryOperator;
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}
	
	//// ****************************************************************************
	//Party:
	//    Application | Process
	//;
	public PartyElements getPartyAccess() {
		return pParty;
	}
	
	public ParserRule getPartyRule() {
		return getPartyAccess().getRule();
	}
	
	//Application:
	//    name=STRING
	//;
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Process:
	//    name=STRING
	//;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//OnSuccess:
	//    '(' action=Action '(' message=Expression ')' ')'
	//;
	public OnSuccessElements getOnSuccessAccess() {
		return pOnSuccess;
	}
	
	public ParserRule getOnSuccessRule() {
		return getOnSuccessAccess().getRule();
	}
	
	//OnBreach:
	//     '(' action=Action '(' message=Expression ')' ')'
	//;
	public OnBreachElements getOnBreachAccess() {
		return pOnBreach;
	}
	
	public ParserRule getOnBreachRule() {
		return getOnBreachAccess().getRule();
	}
	
	//Action:
	//    BusinessAction | EventLog;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//BusinessAction:
	//    'BusinessAction' name=ID //'(' parameters+=Variable (',' parameters+=Variable)* ')'
	//;
	public BusinessActionElements getBusinessActionAccess() {
		return pBusinessAction;
	}
	
	public ParserRule getBusinessActionRule() {
		return getBusinessActionAccess().getRule();
	}
	
	//EventLog:
	//    'EventLog' name=ID    //'(' parameters+=Variable (',' parameters+=Variable)* ')'
	//;
	public EventLogElements getEventLogAccess() {
		return pEventLog;
	}
	
	public ParserRule getEventLogRule() {
		return getEventLogAccess().getRule();
	}
	
	//Expression:
	//    Negation ({BinaryOperator.left=current} (symbol='&&' | symbol="||") right=Negation)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Negation returns Expression:
	//    Comparison | {UnaryOperator} symbol='!' expression=Comparison;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//Comparison returns Expression:
	//    Plus ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
	//    | symbol='==' | symbol='is' | symbol='as') right=Plus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Plus returns Expression:
	//    Factor ({BinaryOperator.left=current} ('+' | '-') right=Factor)*;
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Factor returns Expression:
	//    Negative ({BinaryOperator.left=current} ('*' | '/') right=Negative)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Negative returns Expression:
	//    Primary | {UnaryOperator} '-' expression=Primary;
	public NegativeElements getNegativeAccess() {
		return pNegative;
	}
	
	public ParserRule getNegativeRule() {
		return getNegativeAccess().getRule();
	}
	
	//Primary returns Expression:
	//    LiteralValue | '(' Expression ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//LiteralValue:
	//    NumericValue | StringValue | VariableValue | FunctionCall;
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//NumericValue:
	//    value=INT;
	public NumericValueElements getNumericValueAccess() {
		return pNumericValue;
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}
	
	//StringValue:
	//    value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VariableValue:
	//    value=QualifiedName;
	public VariableValueElements getVariableValueAccess() {
		return pVariableValue;
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}
	
	//FunctionCall:
	//    name=QualifiedName '(' params+=Expression (',' params+=Expression)* ')'
	//;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//    QualifiedName '.*';
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DATE: YEAR'-'MONTH'-'DAY'T'HOUR':'MIN':'SEC;
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}
	
	//YEAR: INT;
	public YEARElements getYEARAccess() {
		return pYEAR;
	}
	
	public ParserRule getYEARRule() {
		return getYEARAccess().getRule();
	}
	
	//MONTH: INT;
	public MONTHElements getMONTHAccess() {
		return pMONTH;
	}
	
	public ParserRule getMONTHRule() {
		return getMONTHAccess().getRule();
	}
	
	//DAY: INT;
	public DAYElements getDAYAccess() {
		return pDAY;
	}
	
	public ParserRule getDAYRule() {
		return getDAYAccess().getRule();
	}
	
	//HOUR: INT;
	public HOURElements getHOURAccess() {
		return pHOUR;
	}
	
	public ParserRule getHOURRule() {
		return getHOURAccess().getRule();
	}
	
	//MIN: INT;
	public MINElements getMINAccess() {
		return pMIN;
	}
	
	public ParserRule getMINRule() {
		return getMINAccess().getRule();
	}
	
	//SEC: INT;
	public SECElements getSECAccess() {
		return pSEC;
	}
	
	public ParserRule getSECRule() {
		return getSECAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
