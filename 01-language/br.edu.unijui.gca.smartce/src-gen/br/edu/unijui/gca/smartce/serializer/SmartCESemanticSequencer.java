/*
 * generated by Xtext 2.26.0
 */
package br.edu.unijui.gca.smartce.serializer;

import br.edu.unijui.gca.smartce.services.SmartCEGrammarAccess;
import br.edu.unijui.gca.smartce.smartCE.Application;
import br.edu.unijui.gca.smartce.smartCE.BinaryOperator;
import br.edu.unijui.gca.smartce.smartCE.BusinessAction;
import br.edu.unijui.gca.smartce.smartCE.BusinessDay;
import br.edu.unijui.gca.smartce.smartCE.Clause;
import br.edu.unijui.gca.smartce.smartCE.CompositeCondition;
import br.edu.unijui.gca.smartce.smartCE.ConditionalExpression;
import br.edu.unijui.gca.smartce.smartCE.Contract;
import br.edu.unijui.gca.smartce.smartCE.EventLog;
import br.edu.unijui.gca.smartce.smartCE.FunctionCall;
import br.edu.unijui.gca.smartce.smartCE.Import;
import br.edu.unijui.gca.smartce.smartCE.LogicalOperator;
import br.edu.unijui.gca.smartce.smartCE.MessageContent;
import br.edu.unijui.gca.smartce.smartCE.Model;
import br.edu.unijui.gca.smartce.smartCE.NumericValue;
import br.edu.unijui.gca.smartce.smartCE.OnBreach;
import br.edu.unijui.gca.smartce.smartCE.OnSuccess;
import br.edu.unijui.gca.smartce.smartCE.OperationLimit;
import br.edu.unijui.gca.smartce.smartCE.SessionInterval;
import br.edu.unijui.gca.smartce.smartCE.SmartCEPackage;
import br.edu.unijui.gca.smartce.smartCE.StringValue;
import br.edu.unijui.gca.smartce.smartCE.TimeInterval;
import br.edu.unijui.gca.smartce.smartCE.Timeout;
import br.edu.unijui.gca.smartce.smartCE.UnaryOperator;
import br.edu.unijui.gca.smartce.smartCE.Variable;
import br.edu.unijui.gca.smartce.smartCE.VariableValue;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SmartCESemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmartCEGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmartCEPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmartCEPackage.APPLICATION:
				sequence_Application(context, (Application) semanticObject); 
				return; 
			case SmartCEPackage.BINARY_OPERATOR:
				if (rule == grammarAccess.getBinaryOperatorRule()) {
					sequence_BinaryOperator(context, (BinaryOperator) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()
						|| action == grammarAccess.getExpressionAccess().getBinaryOperatorLeftAction_1_0()
						|| rule == grammarAccess.getNegationRule()
						|| rule == grammarAccess.getComparisonRule()
						|| action == grammarAccess.getComparisonAccess().getBinaryOperatorLeftAction_1_0()
						|| rule == grammarAccess.getPlusRule()
						|| action == grammarAccess.getPlusAccess().getBinaryOperatorLeftAction_1_0()
						|| rule == grammarAccess.getFactorRule()
						|| action == grammarAccess.getFactorAccess().getBinaryOperatorLeftAction_1_0()
						|| rule == grammarAccess.getNegativeRule()
						|| rule == grammarAccess.getPrimaryRule()) {
					sequence_Comparison_Expression_Factor_Plus(context, (BinaryOperator) semanticObject); 
					return; 
				}
				else break;
			case SmartCEPackage.BUSINESS_ACTION:
				sequence_BusinessAction(context, (BusinessAction) semanticObject); 
				return; 
			case SmartCEPackage.BUSINESS_DAY:
				sequence_BusinessDay(context, (BusinessDay) semanticObject); 
				return; 
			case SmartCEPackage.CLAUSE:
				sequence_Clause(context, (Clause) semanticObject); 
				return; 
			case SmartCEPackage.COMPOSITE_CONDITION:
				sequence_CompositeCondition(context, (CompositeCondition) semanticObject); 
				return; 
			case SmartCEPackage.CONDITIONAL_EXPRESSION:
				sequence_ConditionalExpression(context, (ConditionalExpression) semanticObject); 
				return; 
			case SmartCEPackage.CONTRACT:
				sequence_Contract(context, (Contract) semanticObject); 
				return; 
			case SmartCEPackage.EVENT_LOG:
				sequence_EventLog(context, (EventLog) semanticObject); 
				return; 
			case SmartCEPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case SmartCEPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case SmartCEPackage.LOGICAL_OPERATOR:
				sequence_LogicalOperator(context, (LogicalOperator) semanticObject); 
				return; 
			case SmartCEPackage.MESSAGE_CONTENT:
				sequence_MessageContent(context, (MessageContent) semanticObject); 
				return; 
			case SmartCEPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SmartCEPackage.NUMERIC_VALUE:
				sequence_NumericValue(context, (NumericValue) semanticObject); 
				return; 
			case SmartCEPackage.ON_BREACH:
				sequence_OnBreach(context, (OnBreach) semanticObject); 
				return; 
			case SmartCEPackage.ON_SUCCESS:
				sequence_OnSuccess(context, (OnSuccess) semanticObject); 
				return; 
			case SmartCEPackage.OPERATION_LIMIT:
				sequence_OperationLimit(context, (OperationLimit) semanticObject); 
				return; 
			case SmartCEPackage.PROCESS:
				sequence_Process(context, (br.edu.unijui.gca.smartce.smartCE.Process) semanticObject); 
				return; 
			case SmartCEPackage.SESSION_INTERVAL:
				sequence_SessionInterval(context, (SessionInterval) semanticObject); 
				return; 
			case SmartCEPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case SmartCEPackage.TIME_INTERVAL:
				sequence_TimeInterval(context, (TimeInterval) semanticObject); 
				return; 
			case SmartCEPackage.TIMEOUT:
				sequence_Timeout(context, (Timeout) semanticObject); 
				return; 
			case SmartCEPackage.UNARY_OPERATOR:
				sequence_Negation_Negative(context, (UnaryOperator) semanticObject); 
				return; 
			case SmartCEPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case SmartCEPackage.VARIABLE_VALUE:
				sequence_VariableValue(context, (VariableValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Party returns Application
	 *     Application returns Application
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Application(ISerializationContext context, Application semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.PARTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.PARTY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApplicationAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BinaryOperator returns BinaryOperator
	 *
	 * Constraint:
	 *     (
	 *         symbol='&lt;=' | 
	 *         symbol='&gt;=' | 
	 *         symbol='&gt;' | 
	 *         symbol='&lt;' | 
	 *         symbol='!=' | 
	 *         symbol='=='
	 *     )
	 * </pre>
	 */
	protected void sequence_BinaryOperator(ISerializationContext context, BinaryOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns BusinessAction
	 *     BusinessAction returns BusinessAction
	 *
	 * Constraint:
	 *     name='BusinessAction'
	 * </pre>
	 */
	protected void sequence_BusinessAction(ISerializationContext context, BusinessAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.ACTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBusinessActionAccess().getNameBusinessActionKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns BusinessDay
	 *     BusinessRule returns BusinessDay
	 *     BusinessDay returns BusinessDay
	 *
	 * Constraint:
	 *     (start=WeekDay end=WeekDay)
	 * </pre>
	 */
	protected void sequence_BusinessDay(ISerializationContext context, BusinessDay semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.BUSINESS_DAY__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.BUSINESS_DAY__START));
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.BUSINESS_DAY__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.BUSINESS_DAY__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBusinessDayAccess().getStartWeekDayEnumRuleCall_2_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getBusinessDayAccess().getEndWeekDayEnumRuleCall_4_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Clause returns Clause
	 *
	 * Constraint:
	 *     (name=ID operation=Operation condition=Condition onBreach=OnBreach onSuccess=OnSuccess?)
	 * </pre>
	 */
	protected void sequence_Clause(ISerializationContext context, Clause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns BinaryOperator
	 *     Expression.BinaryOperator_1_0 returns BinaryOperator
	 *     Negation returns BinaryOperator
	 *     Comparison returns BinaryOperator
	 *     Comparison.BinaryOperator_1_0 returns BinaryOperator
	 *     Plus returns BinaryOperator
	 *     Plus.BinaryOperator_1_0 returns BinaryOperator
	 *     Factor returns BinaryOperator
	 *     Factor.BinaryOperator_1_0 returns BinaryOperator
	 *     Negative returns BinaryOperator
	 *     Primary returns BinaryOperator
	 *
	 * Constraint:
	 *     (
	 *         (left=Expression_BinaryOperator_1_0 (symbol='AND' | symbol='&&' | symbol='||' | symbol='OR') right=Negation) | 
	 *         (
	 *             left=Comparison_BinaryOperator_1_0 
	 *             (
	 *                 symbol='&lt;=' | 
	 *                 symbol='&gt;=' | 
	 *                 symbol='&gt;' | 
	 *                 symbol='&lt;' | 
	 *                 symbol='!=' | 
	 *                 symbol='==' | 
	 *                 symbol='is' | 
	 *                 symbol='as'
	 *             ) 
	 *             right=Plus
	 *         ) | 
	 *         (left=Plus_BinaryOperator_1_0 right=Factor) | 
	 *         (left=Factor_BinaryOperator_1_0 right=Negative)
	 *     )
	 * </pre>
	 */
	protected void sequence_Comparison_Expression_Factor_Plus(ISerializationContext context, BinaryOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns CompositeCondition
	 *     CompositeCondition returns CompositeCondition
	 *
	 * Constraint:
	 *     (
	 *         conditions+=BusinessRule 
	 *         logicalOperators+=LogicalOperator 
	 *         (conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*)*
	 *     )
	 * </pre>
	 */
	protected void sequence_CompositeCondition(ISerializationContext context, CompositeCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns ConditionalExpression
	 *     ConditionalExpression returns ConditionalExpression
	 *
	 * Constraint:
	 *     (conditions+=CompositeCondition expression+=Expression conditions+=Condition)
	 * </pre>
	 */
	protected void sequence_ConditionalExpression(ISerializationContext context, ConditionalExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Contract returns Contract
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         beginDate=Expression 
	 *         dueDate=Expression 
	 *         application=Application 
	 *         process=Process 
	 *         variables+=Variable* 
	 *         clauses+=Clause*
	 *     )
	 * </pre>
	 */
	protected void sequence_Contract(ISerializationContext context, Contract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns EventLog
	 *     EventLog returns EventLog
	 *
	 * Constraint:
	 *     name='EventLog'
	 * </pre>
	 */
	protected void sequence_EventLog(ISerializationContext context, EventLog semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.ACTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventLogAccess().getNameEventLogKeyword_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns FunctionCall
	 *     Expression.BinaryOperator_1_0 returns FunctionCall
	 *     Negation returns FunctionCall
	 *     Comparison returns FunctionCall
	 *     Comparison.BinaryOperator_1_0 returns FunctionCall
	 *     Plus returns FunctionCall
	 *     Plus.BinaryOperator_1_0 returns FunctionCall
	 *     Factor returns FunctionCall
	 *     Factor.BinaryOperator_1_0 returns FunctionCall
	 *     Negative returns FunctionCall
	 *     Primary returns FunctionCall
	 *     LiteralValue returns FunctionCall
	 *     FunctionCall returns FunctionCall
	 *
	 * Constraint:
	 *     (name=QualifiedName params+=Expression params+=Expression*)
	 * </pre>
	 */
	protected void sequence_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 * </pre>
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicalOperator returns LogicalOperator
	 *
	 * Constraint:
	 *     (name='AND' | name='OR' | name='NOT')
	 * </pre>
	 */
	protected void sequence_LogicalOperator(ISerializationContext context, LogicalOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns MessageContent
	 *     BusinessRule returns MessageContent
	 *     MessageContent returns MessageContent
	 *
	 * Constraint:
	 *     (
	 *         content=STRING | 
	 *         (content=STRING timeUnit=TimeUnit) | 
	 *         (content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue | numericValue=NumericValue)) | 
	 *         (
	 *             content=STRING 
	 *             binaryOperator=BinaryOperator 
	 *             (stringValue=StringValue | variableValue=VariableValue | numericValue=NumericValue) 
	 *             timeUnit=TimeUnit
	 *         )
	 *     )
	 * </pre>
	 */
	protected void sequence_MessageContent(ISerializationContext context, MessageContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (imports+=Import* contracts+=Contract*)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns UnaryOperator
	 *     Expression.BinaryOperator_1_0 returns UnaryOperator
	 *     Negation returns UnaryOperator
	 *     Comparison returns UnaryOperator
	 *     Comparison.BinaryOperator_1_0 returns UnaryOperator
	 *     Plus returns UnaryOperator
	 *     Plus.BinaryOperator_1_0 returns UnaryOperator
	 *     Factor returns UnaryOperator
	 *     Factor.BinaryOperator_1_0 returns UnaryOperator
	 *     Negative returns UnaryOperator
	 *     Primary returns UnaryOperator
	 *
	 * Constraint:
	 *     ((symbol='!' expression=Comparison) | expression=Primary)
	 * </pre>
	 */
	protected void sequence_Negation_Negative(ISerializationContext context, UnaryOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns NumericValue
	 *     Expression.BinaryOperator_1_0 returns NumericValue
	 *     Negation returns NumericValue
	 *     Comparison returns NumericValue
	 *     Comparison.BinaryOperator_1_0 returns NumericValue
	 *     Plus returns NumericValue
	 *     Plus.BinaryOperator_1_0 returns NumericValue
	 *     Factor returns NumericValue
	 *     Factor.BinaryOperator_1_0 returns NumericValue
	 *     Negative returns NumericValue
	 *     Primary returns NumericValue
	 *     LiteralValue returns NumericValue
	 *     NumericValue returns NumericValue
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_NumericValue(ISerializationContext context, NumericValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.NUMERIC_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.NUMERIC_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumericValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OnBreach returns OnBreach
	 *
	 * Constraint:
	 *     (action=Action message=Expression)
	 * </pre>
	 */
	protected void sequence_OnBreach(ISerializationContext context, OnBreach semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.ON_BREACH__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.ON_BREACH__ACTION));
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.ON_BREACH__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.ON_BREACH__MESSAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnBreachAccess().getActionActionParserRuleCall_1_0(), semanticObject.getAction());
		feeder.accept(grammarAccess.getOnBreachAccess().getMessageExpressionParserRuleCall_3_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OnSuccess returns OnSuccess
	 *
	 * Constraint:
	 *     (action=Action message=Expression)
	 * </pre>
	 */
	protected void sequence_OnSuccess(ISerializationContext context, OnSuccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.ON_SUCCESS__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.ON_SUCCESS__ACTION));
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.ON_SUCCESS__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.ON_SUCCESS__MESSAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnSuccessAccess().getActionActionParserRuleCall_1_0(), semanticObject.getAction());
		feeder.accept(grammarAccess.getOnSuccessAccess().getMessageExpressionParserRuleCall_3_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns OperationLimit
	 *     BusinessRule returns OperationLimit
	 *     OperationLimit returns OperationLimit
	 *
	 * Constraint:
	 *     (operationsNumber=INT timeUnit=TimeUnit)
	 * </pre>
	 */
	protected void sequence_OperationLimit(ISerializationContext context, OperationLimit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.OPERATION_LIMIT__OPERATIONS_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.OPERATION_LIMIT__OPERATIONS_NUMBER));
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.OPERATION_LIMIT__TIME_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.OPERATION_LIMIT__TIME_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOperationLimitAccess().getOperationsNumberINTTerminalRuleCall_2_0(), semanticObject.getOperationsNumber());
		feeder.accept(grammarAccess.getOperationLimitAccess().getTimeUnitTimeUnitEnumRuleCall_4_0(), semanticObject.getTimeUnit());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Party returns Process
	 *     Process returns Process
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, br.edu.unijui.gca.smartce.smartCE.Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.PARTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.PARTY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns SessionInterval
	 *     BusinessRule returns SessionInterval
	 *     SessionInterval returns SessionInterval
	 *
	 * Constraint:
	 *     ((frequency=INT timeUnit=TimeUnit messagecontent=MessageContent) | (frequency=INT timeUnit=TimeUnit))
	 * </pre>
	 */
	protected void sequence_SessionInterval(ISerializationContext context, SessionInterval semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns StringValue
	 *     Expression.BinaryOperator_1_0 returns StringValue
	 *     Negation returns StringValue
	 *     Comparison returns StringValue
	 *     Comparison.BinaryOperator_1_0 returns StringValue
	 *     Plus returns StringValue
	 *     Plus.BinaryOperator_1_0 returns StringValue
	 *     Factor returns StringValue
	 *     Factor.BinaryOperator_1_0 returns StringValue
	 *     Negative returns StringValue
	 *     Primary returns StringValue
	 *     LiteralValue returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns TimeInterval
	 *     BusinessRule returns TimeInterval
	 *     TimeInterval returns TimeInterval
	 *
	 * Constraint:
	 *     (start=STRING end=STRING)
	 * </pre>
	 */
	protected void sequence_TimeInterval(ISerializationContext context, TimeInterval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.TIME_INTERVAL__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.TIME_INTERVAL__START));
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.TIME_INTERVAL__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.TIME_INTERVAL__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeIntervalAccess().getStartSTRINGTerminalRuleCall_2_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getTimeIntervalAccess().getEndSTRINGTerminalRuleCall_4_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Timeout
	 *     BusinessRule returns Timeout
	 *     Timeout returns Timeout
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_Timeout(ISerializationContext context, Timeout semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.BUSINESS_RULE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.BUSINESS_RULE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeoutAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns VariableValue
	 *     Expression.BinaryOperator_1_0 returns VariableValue
	 *     Negation returns VariableValue
	 *     Comparison returns VariableValue
	 *     Comparison.BinaryOperator_1_0 returns VariableValue
	 *     Plus returns VariableValue
	 *     Plus.BinaryOperator_1_0 returns VariableValue
	 *     Factor returns VariableValue
	 *     Factor.BinaryOperator_1_0 returns VariableValue
	 *     Negative returns VariableValue
	 *     Primary returns VariableValue
	 *     LiteralValue returns VariableValue
	 *     VariableValue returns VariableValue
	 *
	 * Constraint:
	 *     value=QualifiedName
	 * </pre>
	 */
	protected void sequence_VariableValue(ISerializationContext context, VariableValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartCEPackage.Literals.VARIABLE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartCEPackage.Literals.VARIABLE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableValueAccess().getValueQualifiedNameParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     ((name=ID expression+=Expression) | (name=ID businessRule+=BusinessRule))
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
