grammar br.edu.unijui.gca.smartce.SmartCE with org.eclipse.xtext.common.Terminals

import "http://www.edu.br/unijui/gca/smartce/SmartCE"

Model: 
	{Model}
	imports+=Import*
	contracts+=Contract*;

Import:
     'import' importedNamespace=QualifiedNameWithWildcard
;

Contract: 
	'Contract' name=ID '{'
		
		'dates' '{'
			'beginDate' '=' beginDate=Expression
			'dueDate' '=' dueDate=Expression 
		'}'
		
		'parties' '{'
			'application' '=' application=Application
			'process' '=' process=Process
		'}'
		
		('variables' '{'
			variables+=Variable*
		'}')?
		
		'clauses' '{'
			clauses+=Clause*
		'}'
		
	'}'; 

Variable:
	(name=ID '=' expression+=Expression) |
	(name=ID '=' businessRule+=BusinessRule)
;


Clause: 
	('Right' | 'Prohibition' | 'Obligation') name=ID '{'
		'rolePlayer' '=' ('process' | 'application')
		'operation' '=' operation=Operation
		'condition' '{' 
			condition=Condition			
		'}'
		'onBreach' onBreach=OnBreach ('onSuccess' onSuccess=OnSuccess)?
	 '}' 
;

enum Operation:
    PUSH='push' | POLL='poll' | WRITE='write' | READ = 'read' | REQUEST='request' | RESPONSE='response' 
;

Condition: 
	BusinessRule | CompositeCondition | ConditionalExpression
;

BusinessRule:
	Timeout | OperationLimit | BusinessDay |TimeInterval | MessageContent | SessionInterval	
;

CompositeCondition:	
	conditions+=BusinessRule logicalOperators+=LogicalOperator (conditions+=BusinessRule (logicalOperators+=LogicalOperator conditions+=BusinessRule)*)*
;

ConditionalExpression: 
	conditions+=CompositeCondition
	'when' '(' expression+=Expression ')' 'do' '{'
		conditions+=Condition
	'}'
;

LogicalOperator:
	name=('AND' | 'OR' | 'NOT')
;

Timeout:
	'Timeout' '(' value=INT ')'
;

OperationLimit:
	'OperationLimit' '(' operationsNumber=INT 'by' timeUnit=TimeUnit  ')'
;

BusinessDay:
	('BusinessDay' '(' start=WeekDay 'to' end=WeekDay ')')
	
;

enum WeekDay:
    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
;
    
enum TimeUnit:
    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
;
      
TimeInterval: 
	'TimeInterval' '(' start=STRING 'to' end=STRING')'
; 

SessionInterval: 
	('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' messagecontent=MessageContent  ) ')'|
	('SessionInterval' '('frequency=INT timeUnit=TimeUnit')')
; 
MessageContent:
	('MessageContent' '(' content=STRING ')') | /* Add an user help -> This field requires an xpath expression */	
	('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')') |
	('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue)')' )|
	('MessageContent' '(' content=STRING binaryOperator=BinaryOperator (stringValue=StringValue | variableValue=VariableValue |numericValue=NumericValue) 'by' timeUnit=TimeUnit')' )
;

// ----------------- Add the binary operator -------------------------
BinaryOperator:
symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
	| symbol='==' 
;

Party: 
	Application | Process
;

Application: 
	name=STRING
;

Process: 
	name=STRING
;

OnSuccess:
	'(' action=Action '(' message=Expression ')' ')' 
;

OnBreach:
	 '(' action=Action '(' message=Expression ')' ')' 
;

Action:
	BusinessAction | EventLog;

BusinessAction:
	name='BusinessAction' 
;

EventLog:
	name='EventLog' 
;

Expression:
	Negation ({BinaryOperator.left=current} (symbol='AND' | symbol='&&' | symbol="||" | symbol='OR'  ) right=Negation)*;

Negation returns Expression:
	Comparison | {UnaryOperator} symbol='!' expression=Comparison;


Comparison returns Expression:
	Plus ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
	| symbol='==' | symbol='is' | symbol='as') right=Plus)*;


Plus returns Expression:
	Factor ({BinaryOperator.left=current} ('+' | '-') right=Factor)*;

Factor returns Expression:
	Negative ({BinaryOperator.left=current} ('*' | '/') right=Negative)*;

Negative returns Expression:
	Primary | {UnaryOperator} '-' expression=Primary;

Primary returns Expression:
	LiteralValue | '(' Expression ')';
	
LiteralValue:
	NumericValue | StringValue | VariableValue | FunctionCall;

NumericValue:
	value=INT;

StringValue:
	value=STRING;

VariableValue:
	value=QualifiedName;

FunctionCall:
	name=QualifiedName '(' params+=Expression (',' params+=Expression)* ')'
;

QualifiedName:
	ID ('.' ID)*;
	
QualifiedNameWithWildcard:
	QualifiedName '.*'; 

DATE: YEAR'-'MONTH'-'DAY'T'HOUR':'MIN':'SEC;
YEAR: INT;
MONTH: INT;
DAY: INT;
HOUR: INT;
MIN: INT;
SEC: INT;
