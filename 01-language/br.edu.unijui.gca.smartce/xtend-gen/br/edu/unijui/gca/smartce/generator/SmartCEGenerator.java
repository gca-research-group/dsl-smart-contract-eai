/**
 * generated by Xtext 2.25.0
 */
package br.edu.unijui.gca.smartce.generator;

import br.edu.unijui.gca.smartce.smartCE.BusinessDay;
import br.edu.unijui.gca.smartce.smartCE.Condition;
import br.edu.unijui.gca.smartce.smartCE.Contract;
import br.edu.unijui.gca.smartce.smartCE.MessageContent;
import br.edu.unijui.gca.smartce.smartCE.OperationLimit;
import br.edu.unijui.gca.smartce.smartCE.TimeInterval;
import br.edu.unijui.gca.smartce.smartCE.TimeUnit;
import br.edu.unijui.gca.smartce.smartCE.Timeout;
import br.edu.unijui.gca.smartce.smartCE.WeekDay;
import com.google.common.collect.Iterators;
import java.sql.Timestamp;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SmartCEGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Contract> _iterable = IteratorExtensions.<Contract>toIterable(Iterators.<Contract>filter(resource.getAllContents(), Contract.class));
    for (final Contract c : _iterable) {
      String _name = c.getName();
      String _plus = (_name + ".sol");
      fsa.generateFile(_plus, this.generateSolCode(c));
    }
  }
  
  public CharSequence generateSolCode(final Contract c) {
    throw new Error("Unresolved compilation problems:"
      + "\nAmbiguous feature call.\nThe methods\n\tname() in Enum and\n\tgetName() in Parties\nboth match."
      + "\nType mismatch: cannot convert from ValueAndDescription to String"
      + "\nType mismatch: cannot convert from ValueAndDescription to String");
  }
  
  public long getTS(final String date) {
    long _time = Timestamp.valueOf(date).getTime();
    return (_time / 1000);
  }
  
  public CharSequence getConditions(final Condition condition) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(condition.eAllContents());
      for(final EObject c : _iterable) {
        {
          if ((c instanceof Timeout)) {
            _builder.append("Timeout public timeout = Timeout(");
            int _value = ((Timeout)c).getValue();
            _builder.append(_value);
            _builder.append(", 0);");
            _builder.newLineIfNotEmpty();
          } else {
            if ((c instanceof BusinessDay)) {
              _builder.append("BusinessDay public businessDay = BusinessDay(");
              WeekDay _start = ((BusinessDay)c).getStart();
              _builder.append(_start);
              _builder.append(", ");
              WeekDay _end = ((BusinessDay)c).getEnd();
              _builder.append(_end);
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              if ((c instanceof TimeInterval)) {
                _builder.append("TimeInterval public timeInterval = TimeInterval(");
                String _start_1 = ((TimeInterval)c).getStart();
                _builder.append(_start_1);
                _builder.append(", ");
                String _end_1 = ((TimeInterval)c).getEnd();
                _builder.append(_end_1);
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              } else {
                if ((c instanceof OperationLimit)) {
                  _builder.append("OperationLimit public operationLimit = OperationLimit(");
                  int _operationsNumber = ((OperationLimit)c).getOperationsNumber();
                  _builder.append(_operationsNumber);
                  _builder.append(", ");
                  TimeUnit _timeUnit = ((OperationLimit)c).getTimeUnit();
                  _builder.append(_timeUnit);
                  _builder.append(", 0, 0);");
                  _builder.newLineIfNotEmpty();
                } else {
                  if ((c instanceof MessageContent)) {
                    _builder.append("MessageContent public messageContent = MessageContent(\"");
                    String _content = ((MessageContent)c).getContent();
                    _builder.append(_content);
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence getConditionals(final Condition condition) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(condition.eAllContents());
      for(final EObject c : _iterable) {
        {
          if ((c instanceof Timeout)) {
            _builder.append("!isTimeout(_accessDateTime, timeout.endTime) &&");
            _builder.newLine();
          } else {
            if ((c instanceof BusinessDay)) {
              _builder.append("isBusinessDay(_accessDateTime, businessDay) &&");
              _builder.newLine();
            } else {
              if ((c instanceof TimeInterval)) {
                _builder.append("isIntoTimeInterval(_accessDateTime, timeInterval) &&");
                _builder.newLine();
              } else {
                if ((c instanceof OperationLimit)) {
                  _builder.append("!isOperationLimitReached(_accessDateTime, operationLimit) &&");
                  _builder.newLine();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
}
