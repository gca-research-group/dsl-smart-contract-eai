/*
 * generated by Xtext 2.28.0
 */
package br.edu.unijui.gca.jabuti.serializer;

import br.edu.unijui.gca.jabuti.jabuti.Application;
import br.edu.unijui.gca.jabuti.jabuti.Contract;
import br.edu.unijui.gca.jabuti.jabuti.Import;
import br.edu.unijui.gca.jabuti.jabuti.JabutiPackage;
import br.edu.unijui.gca.jabuti.jabuti.Model;
import br.edu.unijui.gca.jabuti.jabuti.Obligation;
import br.edu.unijui.gca.jabuti.jabuti.Prohibition;
import br.edu.unijui.gca.jabuti.jabuti.Right;
import br.edu.unijui.gca.jabuti.services.JabutiGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class JabutiSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JabutiGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JabutiPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JabutiPackage.APPLICATION:
				sequence_Application(context, (Application) semanticObject); 
				return; 
			case JabutiPackage.CONTRACT:
				sequence_Contract(context, (Contract) semanticObject); 
				return; 
			case JabutiPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case JabutiPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case JabutiPackage.OBLIGATION:
				if (rule == grammarAccess.getClauseRule()) {
					sequence_Clause_Obligation(context, (Obligation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getObligationRule()) {
					sequence_Obligation(context, (Obligation) semanticObject); 
					return; 
				}
				else break;
			case JabutiPackage.PROCESS:
				sequence_Process(context, (br.edu.unijui.gca.jabuti.jabuti.Process) semanticObject); 
				return; 
			case JabutiPackage.PROHIBITION:
				if (rule == grammarAccess.getClauseRule()) {
					sequence_Clause_Prohibition(context, (Prohibition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProhibitionRule()) {
					sequence_Prohibition(context, (Prohibition) semanticObject); 
					return; 
				}
				else break;
			case JabutiPackage.RIGHT:
				if (rule == grammarAccess.getClauseRule()) {
					sequence_Clause_Right(context, (Right) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRightRule()) {
					sequence_Right(context, (Right) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Party returns Application
	 *     Application returns Application
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Application(ISerializationContext context, Application semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.PARTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.PARTY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApplicationAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Clause returns Obligation
	 *
	 * Constraint:
	 *     (name=ID roleplayer=RolePlayer)
	 * </pre>
	 */
	protected void sequence_Clause_Obligation(ISerializationContext context, Obligation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__ROLEPLAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__ROLEPLAYER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObligationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getClauseAccess().getRoleplayerRolePlayerEnumRuleCall_4_0(), semanticObject.getRoleplayer());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Clause returns Prohibition
	 *
	 * Constraint:
	 *     (name=ID roleplayer=RolePlayer)
	 * </pre>
	 */
	protected void sequence_Clause_Prohibition(ISerializationContext context, Prohibition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__ROLEPLAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__ROLEPLAYER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProhibitionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getClauseAccess().getRoleplayerRolePlayerEnumRuleCall_4_0(), semanticObject.getRoleplayer());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Clause returns Right
	 *
	 * Constraint:
	 *     (name=ID roleplayer=RolePlayer)
	 * </pre>
	 */
	protected void sequence_Clause_Right(ISerializationContext context, Right semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__ROLEPLAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__ROLEPLAYER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRightAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getClauseAccess().getRoleplayerRolePlayerEnumRuleCall_4_0(), semanticObject.getRoleplayer());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Contract returns Contract
	 *
	 * Constraint:
	 *     (name=ID application=Application process=Process clauses+=Clause*)
	 * </pre>
	 */
	protected void sequence_Contract(ISerializationContext context, Contract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 * </pre>
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (imports+=Import* contract=Contract)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Obligation returns Obligation
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Obligation(ISerializationContext context, Obligation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObligationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Party returns Process
	 *     Process returns Process
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, br.edu.unijui.gca.jabuti.jabuti.Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.PARTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.PARTY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Prohibition returns Prohibition
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Prohibition(ISerializationContext context, Prohibition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProhibitionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Right returns Right
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Right(ISerializationContext context, Right semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JabutiPackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JabutiPackage.Literals.CLAUSE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRightAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
