/**
 * generated by Xtext 2.28.0
 */
package br.edu.unijui.gca.jabuti.util;

import br.edu.unijui.gca.jabuti.Action;
import br.edu.unijui.gca.jabuti.Application;
import br.edu.unijui.gca.jabuti.BinaryOperator;
import br.edu.unijui.gca.jabuti.BusinessAction;
import br.edu.unijui.gca.jabuti.BusinessDay;
import br.edu.unijui.gca.jabuti.BusinessRule;
import br.edu.unijui.gca.jabuti.Clause;
import br.edu.unijui.gca.jabuti.CompositeCondition;
import br.edu.unijui.gca.jabuti.Condition;
import br.edu.unijui.gca.jabuti.ConditionalExpression;
import br.edu.unijui.gca.jabuti.Contract;
import br.edu.unijui.gca.jabuti.EventLog;
import br.edu.unijui.gca.jabuti.Expression;
import br.edu.unijui.gca.jabuti.FunctionCall;
import br.edu.unijui.gca.jabuti.Import;
import br.edu.unijui.gca.jabuti.JabutiPackage;
import br.edu.unijui.gca.jabuti.LiteralValue;
import br.edu.unijui.gca.jabuti.LogicalOperator;
import br.edu.unijui.gca.jabuti.MessageContent;
import br.edu.unijui.gca.jabuti.Model;
import br.edu.unijui.gca.jabuti.NewEClass33;
import br.edu.unijui.gca.jabuti.NumericValue;
import br.edu.unijui.gca.jabuti.OnBreach;
import br.edu.unijui.gca.jabuti.OnSuccess;
import br.edu.unijui.gca.jabuti.OperationLimit;
import br.edu.unijui.gca.jabuti.Party;
import br.edu.unijui.gca.jabuti.SessionInterval;
import br.edu.unijui.gca.jabuti.StringValue;
import br.edu.unijui.gca.jabuti.TimeInterval;
import br.edu.unijui.gca.jabuti.Timeout;
import br.edu.unijui.gca.jabuti.UnaryOperator;
import br.edu.unijui.gca.jabuti.Variable;
import br.edu.unijui.gca.jabuti.VariableValue;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see br.edu.unijui.gca.jabuti.JabutiPackage
 * @generated
 */
public class JabutiAdapterFactory extends AdapterFactoryImpl
{
  /**
	 * The cached model package.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected static JabutiPackage modelPackage;

  /**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public JabutiAdapterFactory()
  {
		if (modelPackage == null) {
			modelPackage = JabutiPackage.eINSTANCE;
		}
	}

  /**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object object)
  {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

  /**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected JabutiSwitch<Adapter> modelSwitch =
    new JabutiSwitch<Adapter>() {
			@Override
			public Adapter caseModel(Model object) {
				return createModelAdapter();
			}
			@Override
			public Adapter caseImport(Import object) {
				return createImportAdapter();
			}
			@Override
			public Adapter caseContract(Contract object) {
				return createContractAdapter();
			}
			@Override
			public Adapter caseVariable(Variable object) {
				return createVariableAdapter();
			}
			@Override
			public Adapter caseClause(Clause object) {
				return createClauseAdapter();
			}
			@Override
			public Adapter caseCondition(Condition object) {
				return createConditionAdapter();
			}
			@Override
			public Adapter caseBusinessRule(BusinessRule object) {
				return createBusinessRuleAdapter();
			}
			@Override
			public Adapter caseCompositeCondition(CompositeCondition object) {
				return createCompositeConditionAdapter();
			}
			@Override
			public Adapter caseConditionalExpression(ConditionalExpression object) {
				return createConditionalExpressionAdapter();
			}
			@Override
			public Adapter caseLogicalOperator(LogicalOperator object) {
				return createLogicalOperatorAdapter();
			}
			@Override
			public Adapter caseTimeout(Timeout object) {
				return createTimeoutAdapter();
			}
			@Override
			public Adapter caseOperationLimit(OperationLimit object) {
				return createOperationLimitAdapter();
			}
			@Override
			public Adapter caseBusinessDay(BusinessDay object) {
				return createBusinessDayAdapter();
			}
			@Override
			public Adapter caseTimeInterval(TimeInterval object) {
				return createTimeIntervalAdapter();
			}
			@Override
			public Adapter caseSessionInterval(SessionInterval object) {
				return createSessionIntervalAdapter();
			}
			@Override
			public Adapter caseMessageContent(MessageContent object) {
				return createMessageContentAdapter();
			}
			@Override
			public Adapter caseBinaryOperator(BinaryOperator object) {
				return createBinaryOperatorAdapter();
			}
			@Override
			public Adapter caseParty(Party object) {
				return createPartyAdapter();
			}
			@Override
			public Adapter caseApplication(Application object) {
				return createApplicationAdapter();
			}
			@Override
			public Adapter caseProcess(br.edu.unijui.gca.jabuti.Process object) {
				return createProcessAdapter();
			}
			@Override
			public Adapter caseOnSuccess(OnSuccess object) {
				return createOnSuccessAdapter();
			}
			@Override
			public Adapter caseOnBreach(OnBreach object) {
				return createOnBreachAdapter();
			}
			@Override
			public Adapter caseAction(Action object) {
				return createActionAdapter();
			}
			@Override
			public Adapter caseBusinessAction(BusinessAction object) {
				return createBusinessActionAdapter();
			}
			@Override
			public Adapter caseEventLog(EventLog object) {
				return createEventLogAdapter();
			}
			@Override
			public Adapter caseExpression(Expression object) {
				return createExpressionAdapter();
			}
			@Override
			public Adapter caseLiteralValue(LiteralValue object) {
				return createLiteralValueAdapter();
			}
			@Override
			public Adapter caseNumericValue(NumericValue object) {
				return createNumericValueAdapter();
			}
			@Override
			public Adapter caseStringValue(StringValue object) {
				return createStringValueAdapter();
			}
			@Override
			public Adapter caseVariableValue(VariableValue object) {
				return createVariableValueAdapter();
			}
			@Override
			public Adapter caseFunctionCall(FunctionCall object) {
				return createFunctionCallAdapter();
			}
			@Override
			public Adapter caseUnaryOperator(UnaryOperator object) {
				return createUnaryOperatorAdapter();
			}
			@Override
			public Adapter caseNewEClass33(NewEClass33 object) {
				return createNewEClass33Adapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

  /**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
  @Override
  public Adapter createAdapter(Notifier target)
  {
		return modelSwitch.doSwitch((EObject)target);
	}


  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Model <em>Model</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Model
	 * @generated
	 */
  public Adapter createModelAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Import <em>Import</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Import
	 * @generated
	 */
  public Adapter createImportAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Contract <em>Contract</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Contract
	 * @generated
	 */
  public Adapter createContractAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Variable <em>Variable</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Variable
	 * @generated
	 */
  public Adapter createVariableAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Clause <em>Clause</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Clause
	 * @generated
	 */
  public Adapter createClauseAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Condition <em>Condition</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Condition
	 * @generated
	 */
  public Adapter createConditionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.BusinessRule <em>Business Rule</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.BusinessRule
	 * @generated
	 */
  public Adapter createBusinessRuleAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.CompositeCondition <em>Composite Condition</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.CompositeCondition
	 * @generated
	 */
  public Adapter createCompositeConditionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.ConditionalExpression <em>Conditional Expression</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.ConditionalExpression
	 * @generated
	 */
  public Adapter createConditionalExpressionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.LogicalOperator <em>Logical Operator</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.LogicalOperator
	 * @generated
	 */
  public Adapter createLogicalOperatorAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Timeout <em>Timeout</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Timeout
	 * @generated
	 */
  public Adapter createTimeoutAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.OperationLimit <em>Operation Limit</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.OperationLimit
	 * @generated
	 */
  public Adapter createOperationLimitAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.BusinessDay <em>Business Day</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.BusinessDay
	 * @generated
	 */
  public Adapter createBusinessDayAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.TimeInterval <em>Time Interval</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.TimeInterval
	 * @generated
	 */
  public Adapter createTimeIntervalAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.SessionInterval <em>Session Interval</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.SessionInterval
	 * @generated
	 */
  public Adapter createSessionIntervalAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.MessageContent <em>Message Content</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.MessageContent
	 * @generated
	 */
  public Adapter createMessageContentAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.BinaryOperator <em>Binary Operator</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.BinaryOperator
	 * @generated
	 */
  public Adapter createBinaryOperatorAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Party <em>Party</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Party
	 * @generated
	 */
  public Adapter createPartyAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Application <em>Application</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Application
	 * @generated
	 */
  public Adapter createApplicationAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Process <em>Process</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Process
	 * @generated
	 */
  public Adapter createProcessAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.OnSuccess <em>On Success</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.OnSuccess
	 * @generated
	 */
  public Adapter createOnSuccessAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.OnBreach <em>On Breach</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.OnBreach
	 * @generated
	 */
  public Adapter createOnBreachAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Action <em>Action</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Action
	 * @generated
	 */
  public Adapter createActionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.BusinessAction <em>Business Action</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.BusinessAction
	 * @generated
	 */
  public Adapter createBusinessActionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.EventLog <em>Event Log</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.EventLog
	 * @generated
	 */
  public Adapter createEventLogAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.Expression <em>Expression</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.Expression
	 * @generated
	 */
  public Adapter createExpressionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.LiteralValue <em>Literal Value</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.LiteralValue
	 * @generated
	 */
  public Adapter createLiteralValueAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.NumericValue <em>Numeric Value</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.NumericValue
	 * @generated
	 */
  public Adapter createNumericValueAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.StringValue <em>String Value</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.StringValue
	 * @generated
	 */
  public Adapter createStringValueAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.VariableValue <em>Variable Value</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.VariableValue
	 * @generated
	 */
  public Adapter createVariableValueAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.FunctionCall <em>Function Call</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.FunctionCall
	 * @generated
	 */
  public Adapter createFunctionCallAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.UnaryOperator <em>Unary Operator</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.UnaryOperator
	 * @generated
	 */
  public Adapter createUnaryOperatorAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link br.edu.unijui.gca.jabuti.NewEClass33 <em>New EClass33</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see br.edu.unijui.gca.jabuti.NewEClass33
	 * @generated
	 */
	public Adapter createNewEClass33Adapter() {
		return null;
	}

		/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
  public Adapter createEObjectAdapter()
  {
		return null;
	}

} //JabutiAdapterFactory
