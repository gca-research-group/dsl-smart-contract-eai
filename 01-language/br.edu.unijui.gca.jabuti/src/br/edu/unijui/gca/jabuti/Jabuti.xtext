grammar br.edu.unijui.gca.jabuti.Jabuti with org.eclipse.xtext.common.Terminals

import "http://www.edu.br/unijui/gca/jabuti/Jabuti"

Model:
	imports+=Import*
	contract=Contract;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard
;
	
// #################### CONTRACT STRUCTURE ####################
Contract: 
	'contract' name=ID '{'
	
		'dates' '{'
			'beginDate' '=' beginDate=STRING
			'dueDate' '=' dueDate=STRING
		'}'
		
		'variables' '{'
			variables+=Variable*
		'}'
		
		'parties' '{'
				application=Application
				process=Process
		'}'
	
		'clauses' '{'
			clauses+=Clause*
		'}'
				
	'}'; 
	
	
// #################### CLAUSE STRUCTURE AND CLAUSE SUBTYPES ####################
Clause: 
	(Right | Prohibition | Obligation) '{'
		'rolePlayer' '=' roleplayer=RolePlayer
	 '}' 
;

Right:
	'right' name=ID
;
Obligation:
	'obligation' name=ID
;
Prohibition:
	'prohibition' name=ID
;	


// #################### PARTY AND SUBTYPES ####################

Party: 
	(Application | Process) 
;

Application:
	'application' '=' name=STRING
;

Process:
	'process' '=' name=STRING
;


// #################### EXPRESSION GROUP - CLASSES AND SUBCLASSES ####################

Expression:
	Negation ({BinaryOperator.left=current} (symbol='AND' | symbol='&&' | symbol="||" | symbol='OR'  ) right=Negation)*;


Negation returns Expression:
	Comparison | {UnaryOperator} symbol='!' expression=Comparison;


Comparison returns Expression:
	Plus ({BinaryOperator.left=current} (symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='
	| symbol='==' | symbol='is' | symbol='as') right=Plus)*;

Plus returns Expression:
	Factor ({BinaryOperator.left=current} ('+' | '-') right=Factor)*;

Factor returns Expression:
	Negative ({BinaryOperator.left=current} ('*' | '/') right=Negative)*;

Negative returns Expression:
	Primary | {UnaryOperator} '-' expression=Primary;

Primary returns Expression:
	LiteralValue | '(' Expression ')';

LiteralValue:
	NumericValue | StringValue | VariableValue | FunctionCall;

NumericValue:
	value=INT;

StringValue:
	value=STRING;	


VariableValue:
	value=QualifiedName;

FunctionCall:
	name=QualifiedName '(' params+=Expression (',' params+=Expression)* ')'
;

Variable:
	(name=ID '=' expression=Expression) 
	//|(name=ID '=' businessRule+=BusinessRule)
;
// #######################################################

//por que utilizar um qualifiedName e como ID ?
QualifiedName:
	ID ('.' ID)*;
	
QualifiedNameWithWildcard:
	QualifiedName '.*'; 
	
	
	
// #################### ENUM SECTION ####################

enum RolePlayer:
	APPLICATION='application' | PROCESS='process'
;

enum WeekDay:
    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
;
    
enum TimeUnit:
    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
;

// ########### ENUM SECTION ####################

//DATE: YEAR'-'MONTH'-'DAY'T'HOUR':'MIN':'SEC;
//YEAR: INT;
//MONTH: INT;
//DAY: INT;
//HOUR: INT;
//MIN: INT;
//SEC: INT;